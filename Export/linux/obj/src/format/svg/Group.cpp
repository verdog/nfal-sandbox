// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_format_svg_DisplayElement
#include <format/svg/DisplayElement.h>
#endif
#ifndef INCLUDED_format_svg_Group
#include <format/svg/Group.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f8748a6358c6b85f_7_new,"format.svg.Group","new",0x54a9f590,"format.svg.Group.new","format/svg/Group.hx",7,0x07dad262)
HX_LOCAL_STACK_FRAME(_hx_pos_f8748a6358c6b85f_12_hasGroup,"format.svg.Group","hasGroup",0xbfb20a55,"format.svg.Group.hasGroup","format/svg/Group.hx",12,0x07dad262)
HX_LOCAL_STACK_FRAME(_hx_pos_f8748a6358c6b85f_14_findGroup,"format.svg.Group","findGroup",0x27f20d76,"format.svg.Group.findGroup","format/svg/Group.hx",14,0x07dad262)
namespace format{
namespace svg{

void Group_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f8748a6358c6b85f_7_new)
HXLINE(   8)		this->name = HX_("",00,00,00,00);
HXLINE(   9)		this->children = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic Group_obj::__CreateEmpty() { return new Group_obj; }

void *Group_obj::_hx_vtable = 0;

Dynamic Group_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Group_obj > _hx_result = new Group_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Group_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x76432db2;
}

bool Group_obj::hasGroup(::String inName){
            	HX_STACKFRAME(&_hx_pos_f8748a6358c6b85f_12_hasGroup)
HXDLIN(  12)		return ::hx::IsNotNull( this->findGroup(inName) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Group_obj,hasGroup,return )

 ::format::svg::Group Group_obj::findGroup(::String inName){
            	HX_STACKFRAME(&_hx_pos_f8748a6358c6b85f_14_findGroup)
HXLINE(  15)		{
HXLINE(  15)			int _g = 0;
HXDLIN(  15)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  15)			while((_g < _g1->length)){
HXLINE(  15)				 ::format::svg::DisplayElement child = _g1->__get(_g).StaticCast<  ::format::svg::DisplayElement >();
HXDLIN(  15)				_g = (_g + 1);
HXLINE(  16)				if ((child->_hx_getIndex() == 1)) {
HXLINE(  18)					 ::format::svg::Group group = child->_hx_getObject(0).StaticCast<  ::format::svg::Group >();
HXDLIN(  18)					{
HXLINE(  19)						if ((group->name == inName)) {
HXLINE(  20)							return group;
            						}
HXLINE(  22)						 ::format::svg::Group inGroup = group->findGroup(inName);
HXLINE(  23)						if (::hx::IsNotNull( inGroup )) {
HXLINE(  23)							return inGroup;
            						}
            					}
            				}
            			}
            		}
HXLINE(  26)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Group_obj,findGroup,return )


::hx::ObjectPtr< Group_obj > Group_obj::__new() {
	::hx::ObjectPtr< Group_obj > __this = new Group_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Group_obj > Group_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Group_obj *__this = (Group_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Group_obj), true, "format.svg.Group"));
	*(void **)__this = Group_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Group_obj::Group_obj()
{
}

void Group_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Group);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_END_CLASS();
}

void Group_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(children,"children");
}

::hx::Val Group_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasGroup") ) { return ::hx::Val( hasGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"children") ) { return ::hx::Val( children ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"findGroup") ) { return ::hx::Val( findGroup_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Group_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Group_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("children",3f,19,6a,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Group_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Group_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Group_obj,children),HX_("children",3f,19,6a,70)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Group_obj_sStaticStorageInfo = 0;
#endif

static ::String Group_obj_sMemberFields[] = {
	HX_("hasGroup",85,fd,4c,26),
	HX_("findGroup",46,e4,eb,88),
	HX_("name",4b,72,ff,48),
	HX_("children",3f,19,6a,70),
	::String(null()) };

::hx::Class Group_obj::__mClass;

void Group_obj::__register()
{
	Group_obj _hx_dummy;
	Group_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.svg.Group",9e,2d,84,a2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Group_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Group_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Group_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Group_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace svg
