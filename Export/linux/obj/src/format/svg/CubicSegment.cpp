// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_format_gfx_Gfx
#include <format/gfx/Gfx.h>
#endif
#ifndef INCLUDED_format_svg_CubicSegment
#include <format/svg/CubicSegment.h>
#endif
#ifndef INCLUDED_format_svg_PathSegment
#include <format/svg/PathSegment.h>
#endif
#ifndef INCLUDED_format_svg_QuadraticSegment
#include <format/svg/QuadraticSegment.h>
#endif
#ifndef INCLUDED_format_svg_RenderContext
#include <format/svg/RenderContext.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7b3f52d82d942d2d_93_new,"format.svg.CubicSegment","new",0xad9784fc,"format.svg.CubicSegment.new","format/svg/PathSegment.hx",93,0x6d7bc4b3)
HX_LOCAL_STACK_FRAME(_hx_pos_7b3f52d82d942d2d_101_prevCX,"format.svg.CubicSegment","prevCX",0xcee4f14c,"format.svg.CubicSegment.prevCX","format/svg/PathSegment.hx",101,0x6d7bc4b3)
HX_LOCAL_STACK_FRAME(_hx_pos_7b3f52d82d942d2d_102_prevCY,"format.svg.CubicSegment","prevCY",0xcee4f14d,"format.svg.CubicSegment.prevCY","format/svg/PathSegment.hx",102,0x6d7bc4b3)
HX_LOCAL_STACK_FRAME(_hx_pos_7b3f52d82d942d2d_106_Interp,"format.svg.CubicSegment","Interp",0xf33d02d8,"format.svg.CubicSegment.Interp","format/svg/PathSegment.hx",106,0x6d7bc4b3)
HX_LOCAL_STACK_FRAME(_hx_pos_7b3f52d82d942d2d_110_toGfx,"format.svg.CubicSegment","toGfx",0x611f465a,"format.svg.CubicSegment.toGfx","format/svg/PathSegment.hx",110,0x6d7bc4b3)
HX_LOCAL_STACK_FRAME(_hx_pos_7b3f52d82d942d2d_170_toQuadratics,"format.svg.CubicSegment","toQuadratics",0x2d23bbda,"format.svg.CubicSegment.toQuadratics","format/svg/PathSegment.hx",170,0x6d7bc4b3)
HX_LOCAL_STACK_FRAME(_hx_pos_7b3f52d82d942d2d_218_getType,"format.svg.CubicSegment","getType",0x1d3bd50c,"format.svg.CubicSegment.getType","format/svg/PathSegment.hx",218,0x6d7bc4b3)
namespace format{
namespace svg{

void CubicSegment_obj::__construct(Float inCX1,Float inCY1,Float inCX2,Float inCY2,Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_7b3f52d82d942d2d_93_new)
HXLINE(  94)		super::__construct(inX,inY);
HXLINE(  95)		this->cx1 = inCX1;
HXLINE(  96)		this->cy1 = inCY1;
HXLINE(  97)		this->cx2 = inCX2;
HXLINE(  98)		this->cy2 = inCY2;
            	}

Dynamic CubicSegment_obj::__CreateEmpty() { return new CubicSegment_obj; }

void *CubicSegment_obj::_hx_vtable = 0;

Dynamic CubicSegment_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CubicSegment_obj > _hx_result = new CubicSegment_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool CubicSegment_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c548176) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2c548176;
	} else {
		return inClassId==(int)0x77129341;
	}
}

Float CubicSegment_obj::prevCX(){
            	HX_STACKFRAME(&_hx_pos_7b3f52d82d942d2d_101_prevCX)
HXDLIN( 101)		return this->cx2;
            	}


Float CubicSegment_obj::prevCY(){
            	HX_STACKFRAME(&_hx_pos_7b3f52d82d942d2d_102_prevCY)
HXDLIN( 102)		return this->cy2;
            	}


Float CubicSegment_obj::Interp(Float a,Float b,Float frac){
            	HX_STACKFRAME(&_hx_pos_7b3f52d82d942d2d_106_Interp)
HXDLIN( 106)		return (a + ((b - a) * frac));
            	}


HX_DEFINE_DYNAMIC_FUNC3(CubicSegment_obj,Interp,return )

void CubicSegment_obj::toGfx( ::format::gfx::Gfx inGfx, ::format::svg::RenderContext ioContext){
            	HX_STACKFRAME(&_hx_pos_7b3f52d82d942d2d_110_toGfx)
HXLINE( 112)		Float tx0 = ioContext->lastX;
HXLINE( 113)		Float ty0 = ioContext->lastY;
HXLINE( 115)		Float tx1 = ioContext->transX(this->cx1,this->cy1);
HXLINE( 116)		Float ty1 = ioContext->transY(this->cx1,this->cy1);
HXLINE( 117)		Float tx2 = ioContext->transX(this->cx2,this->cy2);
HXLINE( 118)		Float ty2 = ioContext->transY(this->cx2,this->cy2);
HXLINE( 120)		ioContext->setLast(this->x,this->y);
HXLINE( 121)		Float tx3 = ioContext->lastX;
HXLINE( 122)		Float ty3 = ioContext->lastY;
HXLINE( 126)		Float pa_x = this->Interp(tx0,tx1,((Float)0.75));
HXLINE( 127)		Float pa_y = this->Interp(ty0,ty1,((Float)0.75));
HXLINE( 128)		Float pb_x = this->Interp(tx3,tx2,((Float)0.75));
HXLINE( 129)		Float pb_y = this->Interp(ty3,ty2,((Float)0.75));
HXLINE( 132)		Float dx = ((tx3 - tx0) / ( (Float)(16) ));
HXLINE( 133)		Float dy = ((ty3 - ty0) / ( (Float)(16) ));
HXLINE( 136)		Float pcx_1 = this->Interp(tx0,tx1,((Float)0.375));
HXLINE( 137)		Float pcy_1 = this->Interp(ty0,ty1,((Float)0.375));
HXLINE( 140)		Float pcx_2 = (this->Interp(pa_x,pb_x,((Float)0.375)) - dx);
HXLINE( 141)		Float pcy_2 = (this->Interp(pa_y,pb_y,((Float)0.375)) - dy);
HXLINE( 144)		Float pcx_3 = (this->Interp(pb_x,pa_x,((Float)0.375)) + dx);
HXLINE( 145)		Float pcy_3 = (this->Interp(pb_y,pa_y,((Float)0.375)) + dy);
HXLINE( 148)		Float pcx_4 = this->Interp(tx3,tx2,((Float)0.375));
HXLINE( 149)		Float pcy_4 = this->Interp(ty3,ty2,((Float)0.375));
HXLINE( 152)		Float pax_1 = ((pcx_1 + pcx_2) * ((Float)0.5));
HXLINE( 153)		Float pay_1 = ((pcy_1 + pcy_2) * ((Float)0.5));
HXLINE( 155)		Float pax_2 = ((pa_x + pb_x) * ((Float)0.5));
HXLINE( 156)		Float pay_2 = ((pa_y + pb_y) * ((Float)0.5));
HXLINE( 158)		Float pax_3 = ((pcx_3 + pcx_4) * ((Float)0.5));
HXLINE( 159)		Float pay_3 = ((pcy_3 + pcy_4) * ((Float)0.5));
HXLINE( 162)		inGfx->curveTo(pcx_1,pcy_1,pax_1,pay_1);
HXLINE( 163)		inGfx->curveTo(pcx_2,pcy_2,pax_2,pay_2);
HXLINE( 164)		inGfx->curveTo(pcx_3,pcy_3,pax_3,pay_3);
HXLINE( 165)		inGfx->curveTo(pcx_4,pcy_4,tx3,ty3);
            	}


::Array< ::Dynamic> CubicSegment_obj::toQuadratics(Float tx0,Float ty0){
            	HX_GC_STACKFRAME(&_hx_pos_7b3f52d82d942d2d_170_toQuadratics)
HXLINE( 171)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE( 174)		Float pa_x = this->Interp(tx0,this->cx1,((Float)0.75));
HXLINE( 175)		Float pa_y = this->Interp(ty0,this->cy1,((Float)0.75));
HXLINE( 176)		Float pb_x = this->Interp(this->x,this->cx2,((Float)0.75));
HXLINE( 177)		Float pb_y = this->Interp(this->y,this->cy2,((Float)0.75));
HXLINE( 180)		Float dx = ((this->x - tx0) / ( (Float)(16) ));
HXLINE( 181)		Float dy = ((this->y - ty0) / ( (Float)(16) ));
HXLINE( 184)		Float pcx_1 = this->Interp(tx0,this->cx1,((Float)0.375));
HXLINE( 185)		Float pcy_1 = this->Interp(ty0,this->cy1,((Float)0.375));
HXLINE( 188)		Float pcx_2 = (this->Interp(pa_x,pb_x,((Float)0.375)) - dx);
HXLINE( 189)		Float pcy_2 = (this->Interp(pa_y,pb_y,((Float)0.375)) - dy);
HXLINE( 192)		Float pcx_3 = (this->Interp(pb_x,pa_x,((Float)0.375)) + dx);
HXLINE( 193)		Float pcy_3 = (this->Interp(pb_y,pa_y,((Float)0.375)) + dy);
HXLINE( 196)		Float pcx_4 = this->Interp(this->x,this->cx2,((Float)0.375));
HXLINE( 197)		Float pcy_4 = this->Interp(this->y,this->cy2,((Float)0.375));
HXLINE( 200)		Float pax_1 = ((pcx_1 + pcx_2) * ((Float)0.5));
HXLINE( 201)		Float pay_1 = ((pcy_1 + pcy_2) * ((Float)0.5));
HXLINE( 203)		Float pax_2 = ((pa_x + pb_x) * ((Float)0.5));
HXLINE( 204)		Float pay_2 = ((pa_y + pb_y) * ((Float)0.5));
HXLINE( 206)		Float pax_3 = ((pcx_3 + pcx_4) * ((Float)0.5));
HXLINE( 207)		Float pay_3 = ((pcy_3 + pcy_4) * ((Float)0.5));
HXLINE( 210)		result->push( ::format::svg::QuadraticSegment_obj::__alloc( HX_CTX ,pcx_1,pcy_1,pax_1,pay_1));
HXLINE( 211)		result->push( ::format::svg::QuadraticSegment_obj::__alloc( HX_CTX ,pcx_2,pcy_2,pax_2,pay_2));
HXLINE( 212)		result->push( ::format::svg::QuadraticSegment_obj::__alloc( HX_CTX ,pcx_3,pcy_3,pax_3,pay_3));
HXLINE( 213)		result->push( ::format::svg::QuadraticSegment_obj::__alloc( HX_CTX ,pcx_4,pcy_4,this->x,this->y));
HXLINE( 214)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(CubicSegment_obj,toQuadratics,return )

int CubicSegment_obj::getType(){
            	HX_STACKFRAME(&_hx_pos_7b3f52d82d942d2d_218_getType)
HXDLIN( 218)		return 4;
            	}



::hx::ObjectPtr< CubicSegment_obj > CubicSegment_obj::__new(Float inCX1,Float inCY1,Float inCX2,Float inCY2,Float inX,Float inY) {
	::hx::ObjectPtr< CubicSegment_obj > __this = new CubicSegment_obj();
	__this->__construct(inCX1,inCY1,inCX2,inCY2,inX,inY);
	return __this;
}

::hx::ObjectPtr< CubicSegment_obj > CubicSegment_obj::__alloc(::hx::Ctx *_hx_ctx,Float inCX1,Float inCY1,Float inCX2,Float inCY2,Float inX,Float inY) {
	CubicSegment_obj *__this = (CubicSegment_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CubicSegment_obj), false, "format.svg.CubicSegment"));
	*(void **)__this = CubicSegment_obj::_hx_vtable;
	__this->__construct(inCX1,inCY1,inCX2,inCY2,inX,inY);
	return __this;
}

CubicSegment_obj::CubicSegment_obj()
{
}

::hx::Val CubicSegment_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { return ::hx::Val( cx1 ); }
		if (HX_FIELD_EQ(inName,"cy1") ) { return ::hx::Val( cy1 ); }
		if (HX_FIELD_EQ(inName,"cx2") ) { return ::hx::Val( cx2 ); }
		if (HX_FIELD_EQ(inName,"cy2") ) { return ::hx::Val( cy2 ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toGfx") ) { return ::hx::Val( toGfx_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prevCX") ) { return ::hx::Val( prevCX_dyn() ); }
		if (HX_FIELD_EQ(inName,"prevCY") ) { return ::hx::Val( prevCY_dyn() ); }
		if (HX_FIELD_EQ(inName,"Interp") ) { return ::hx::Val( Interp_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getType") ) { return ::hx::Val( getType_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"toQuadratics") ) { return ::hx::Val( toQuadratics_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CubicSegment_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"cx1") ) { cx1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy1") ) { cy1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx2") ) { cx2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy2") ) { cy2=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CubicSegment_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cx1",dc,87,4b,00));
	outFields->push(HX_("cy1",bb,88,4b,00));
	outFields->push(HX_("cx2",dd,87,4b,00));
	outFields->push(HX_("cy2",bc,88,4b,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CubicSegment_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(CubicSegment_obj,cx1),HX_("cx1",dc,87,4b,00)},
	{::hx::fsFloat,(int)offsetof(CubicSegment_obj,cy1),HX_("cy1",bb,88,4b,00)},
	{::hx::fsFloat,(int)offsetof(CubicSegment_obj,cx2),HX_("cx2",dd,87,4b,00)},
	{::hx::fsFloat,(int)offsetof(CubicSegment_obj,cy2),HX_("cy2",bc,88,4b,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CubicSegment_obj_sStaticStorageInfo = 0;
#endif

static ::String CubicSegment_obj_sMemberFields[] = {
	HX_("cx1",dc,87,4b,00),
	HX_("cy1",bb,88,4b,00),
	HX_("cx2",dd,87,4b,00),
	HX_("cy2",bc,88,4b,00),
	HX_("prevCX",68,dc,c2,ae),
	HX_("prevCY",69,dc,c2,ae),
	HX_("Interp",f4,ed,1a,d3),
	HX_("toGfx",be,32,10,14),
	HX_("toQuadratics",f6,e3,1c,91),
	HX_("getType",70,a2,8b,1f),
	::String(null()) };

::hx::Class CubicSegment_obj::__mClass;

void CubicSegment_obj::__register()
{
	CubicSegment_obj _hx_dummy;
	CubicSegment_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.svg.CubicSegment",0a,97,42,02);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CubicSegment_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CubicSegment_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CubicSegment_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CubicSegment_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace svg
