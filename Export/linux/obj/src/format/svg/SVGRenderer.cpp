// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_format_gfx_Gfx
#include <format/gfx/Gfx.h>
#endif
#ifndef INCLUDED_format_gfx_Gfx2Haxe
#include <format/gfx/Gfx2Haxe.h>
#endif
#ifndef INCLUDED_format_gfx_GfxBytes
#include <format/gfx/GfxBytes.h>
#endif
#ifndef INCLUDED_format_gfx_GfxExtent
#include <format/gfx/GfxExtent.h>
#endif
#ifndef INCLUDED_format_gfx_GfxGraphics
#include <format/gfx/GfxGraphics.h>
#endif
#ifndef INCLUDED_format_gfx_GfxTextFinder
#include <format/gfx/GfxTextFinder.h>
#endif
#ifndef INCLUDED_format_gfx_Gradient
#include <format/gfx/Gradient.h>
#endif
#ifndef INCLUDED_format_gfx_LineStyle
#include <format/gfx/LineStyle.h>
#endif
#ifndef INCLUDED_format_svg_DisplayElement
#include <format/svg/DisplayElement.h>
#endif
#ifndef INCLUDED_format_svg_FillType
#include <format/svg/FillType.h>
#endif
#ifndef INCLUDED_format_svg_Grad
#include <format/svg/Grad.h>
#endif
#ifndef INCLUDED_format_svg_Group
#include <format/svg/Group.h>
#endif
#ifndef INCLUDED_format_svg_Path
#include <format/svg/Path.h>
#endif
#ifndef INCLUDED_format_svg_PathSegment
#include <format/svg/PathSegment.h>
#endif
#ifndef INCLUDED_format_svg_RenderContext
#include <format/svg/RenderContext.h>
#endif
#ifndef INCLUDED_format_svg_SVGData
#include <format/svg/SVGData.h>
#endif
#ifndef INCLUDED_format_svg_SVGRenderer
#include <format/svg/SVGRenderer.h>
#endif
#ifndef INCLUDED_format_svg_Text
#include <format/svg/Text.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_47_new,"format.svg.SVGRenderer","new",0x95e46b58,"format.svg.SVGRenderer.new","format/svg/SVGRenderer.hx",47,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_73_iterate,"format.svg.SVGRenderer","iterate",0x0115f0f2,"format.svg.SVGRenderer.iterate","format/svg/SVGRenderer.hx",73,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_85_hasGroup,"format.svg.SVGRenderer","hasGroup",0x84cf9f8d,"format.svg.SVGRenderer.hasGroup","format/svg/SVGRenderer.hx",85,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_89_iterateText,"format.svg.SVGRenderer","iterateText",0x69994abf,"format.svg.SVGRenderer.iterateText","format/svg/SVGRenderer.hx",89,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_96_iteratePath,"format.svg.SVGRenderer","iteratePath",0x66f163b7,"format.svg.SVGRenderer.iteratePath","format/svg/SVGRenderer.hx",96,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_165_iterateGroup,"format.svg.SVGRenderer","iterateGroup",0x88e384ed,"format.svg.SVGRenderer.iterateGroup","format/svg/SVGRenderer.hx",165,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_195_render,"format.svg.SVGRenderer","render",0xb861fb5e,"format.svg.SVGRenderer.render","format/svg/SVGRenderer.hx",195,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_212_renderRect,"format.svg.SVGRenderer","renderRect",0xe6a67ba2,"format.svg.SVGRenderer.renderRect","format/svg/SVGRenderer.hx",212,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_227_renderRect0,"format.svg.SVGRenderer","renderRect0",0xeb05b24e,"format.svg.SVGRenderer.renderRect0","format/svg/SVGRenderer.hx",227,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_246_getExtent,"format.svg.SVGRenderer","getExtent",0x973c8018,"format.svg.SVGRenderer.getExtent","format/svg/SVGRenderer.hx",246,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_265_findText,"format.svg.SVGRenderer","findText",0xfe107b8e,"format.svg.SVGRenderer.findText","format/svg/SVGRenderer.hx",265,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_277_getMatchingRect,"format.svg.SVGRenderer","getMatchingRect",0x8129bd2f,"format.svg.SVGRenderer.getMatchingRect","format/svg/SVGRenderer.hx",277,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_276_getMatchingRect,"format.svg.SVGRenderer","getMatchingRect",0x8129bd2f,"format.svg.SVGRenderer.getMatchingRect","format/svg/SVGRenderer.hx",276,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_285_renderObject,"format.svg.SVGRenderer","renderObject",0xd145c8bd,"format.svg.SVGRenderer.renderObject","format/svg/SVGRenderer.hx",285,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_283_renderObject,"format.svg.SVGRenderer","renderObject",0xd145c8bd,"format.svg.SVGRenderer.renderObject","format/svg/SVGRenderer.hx",283,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_298_renderSprite,"format.svg.SVGRenderer","renderSprite",0x7f9c2603,"format.svg.SVGRenderer.renderSprite","format/svg/SVGRenderer.hx",298,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_302_createShape,"format.svg.SVGRenderer","createShape",0xde306d7d,"format.svg.SVGRenderer.createShape","format/svg/SVGRenderer.hx",302,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_310_namedShape,"format.svg.SVGRenderer","namedShape",0x58da58b0,"format.svg.SVGRenderer.namedShape","format/svg/SVGRenderer.hx",310,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_315_renderBitmap,"format.svg.SVGRenderer","renderBitmap",0xad1259ed,"format.svg.SVGRenderer.renderBitmap","format/svg/SVGRenderer.hx",315,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_63_toHaxe,"format.svg.SVGRenderer","toHaxe",0x2dfa2f49,"format.svg.SVGRenderer.toHaxe","format/svg/SVGRenderer.hx",63,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_68_toBytes,"format.svg.SVGRenderer","toBytes",0xa861cbe8,"format.svg.SVGRenderer.toBytes","format/svg/SVGRenderer.hx",68,0x0ea6fb1a)
HX_LOCAL_STACK_FRAME(_hx_pos_e402e6eaa78e99b2_32_boot,"format.svg.SVGRenderer","boot",0x8a12823a,"format.svg.SVGRenderer.boot","format/svg/SVGRenderer.hx",32,0x0ea6fb1a)
namespace format{
namespace svg{

void SVGRenderer_obj::__construct( ::format::svg::SVGData inSvg,::String inLayer){
            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_47_new)
HXLINE(  48)		this->mSvg = inSvg;
HXLINE(  50)		this->width = this->mSvg->width;
HXLINE(  51)		this->height = this->mSvg->height;
HXLINE(  52)		this->mRoot = this->mSvg;
HXLINE(  53)		if (::hx::IsNotNull( inLayer )) {
HXLINE(  55)			this->mRoot = this->mSvg->findGroup(inLayer);
HXLINE(  56)			if (::hx::IsNull( this->mRoot )) {
HXLINE(  57)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("Could not find SVG group: ",ae,94,67,8f) + inLayer)));
            			}
            		}
            	}

Dynamic SVGRenderer_obj::__CreateEmpty() { return new SVGRenderer_obj; }

void *SVGRenderer_obj::_hx_vtable = 0;

Dynamic SVGRenderer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SVGRenderer_obj > _hx_result = new SVGRenderer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SVGRenderer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7dfa667a;
}

 ::Dynamic SVGRenderer_obj::iterate( ::Dynamic inGfx, ::Dynamic inFilter){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_73_iterate)
HXLINE(  74)		this->mGfx = ( ( ::format::gfx::Gfx)(inGfx) );
HXLINE(  75)		this->mMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  76)		this->mFilter = inFilter;
HXLINE(  77)		this->mGroupPath = ::Array_obj< ::String >::__new(0);
HXLINE(  78)		this->mGfx->size(this->width,this->height);
HXLINE(  79)		this->iterateGroup(this->mRoot,true);
HXLINE(  80)		this->mGfx->eof();
HXLINE(  81)		return inGfx;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SVGRenderer_obj,iterate,return )

bool SVGRenderer_obj::hasGroup(::String inName){
            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_85_hasGroup)
HXDLIN(  85)		return this->mRoot->hasGroup(inName);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SVGRenderer_obj,hasGroup,return )

void SVGRenderer_obj::iterateText( ::format::svg::Text inText){
            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_89_iterateText)
HXLINE(  90)		bool _hx_tmp;
HXDLIN(  90)		if (::hx::IsNotNull( this->mFilter )) {
HXLINE(  90)			_hx_tmp = !(( (bool)(this->mFilter(inText->name,this->mGroupPath)) ));
            		}
            		else {
HXLINE(  90)			_hx_tmp = false;
            		}
HXDLIN(  90)		if (_hx_tmp) {
HXLINE(  91)			return;
            		}
HXLINE(  92)		this->mGfx->renderText(inText);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SVGRenderer_obj,iterateText,(void))

void SVGRenderer_obj::iteratePath( ::format::svg::Path inPath){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_96_iteratePath)
HXLINE(  97)		bool _hx_tmp;
HXDLIN(  97)		if (::hx::IsNotNull( this->mFilter )) {
HXLINE(  97)			_hx_tmp = !(( (bool)(this->mFilter(inPath->name,this->mGroupPath)) ));
            		}
            		else {
HXLINE(  97)			_hx_tmp = false;
            		}
HXDLIN(  97)		if (_hx_tmp) {
HXLINE(  98)			return;
            		}
HXLINE( 100)		bool _hx_tmp1;
HXDLIN( 100)		if ((inPath->segments->length != 0)) {
HXLINE( 100)			_hx_tmp1 = ::hx::IsNull( this->mGfx );
            		}
            		else {
HXLINE( 100)			_hx_tmp1 = true;
            		}
HXDLIN( 100)		if (_hx_tmp1) {
HXLINE( 101)			return;
            		}
HXLINE( 102)		Float px = ((Float)0.0);
HXLINE( 103)		Float py = ((Float)0.0);
HXLINE( 105)		 ::openfl::geom::Matrix m = inPath->matrix->clone();
HXLINE( 106)		m->concat(this->mMatrix);
HXLINE( 107)		 ::format::svg::RenderContext context =  ::format::svg::RenderContext_obj::__alloc( HX_CTX ,m,this->mScaleRect,this->mScaleW,this->mScaleH);
HXLINE( 109)		bool geomOnly = this->mGfx->geometryOnly();
HXLINE( 110)		if (!(geomOnly)) {
HXLINE( 117)			inPath->segments->__get(0).StaticCast<  ::format::svg::PathSegment >()->toGfx(this->mGfx,context);
HXLINE( 119)			{
HXLINE( 119)				 ::format::svg::FillType _g = inPath->fill;
HXDLIN( 119)				switch((int)(_g->_hx_getIndex())){
            					case (int)0: {
HXLINE( 121)						 ::format::svg::Grad grad = _g->_hx_getObject(0).StaticCast<  ::format::svg::Grad >();
HXDLIN( 121)						{
HXLINE( 122)							grad->updateMatrix(m);
HXLINE( 123)							this->mGfx->beginGradientFill(grad);
            						}
            					}
            					break;
            					case (int)1: {
HXLINE( 124)						int colour = _g->_hx_getInt(0);
HXLINE( 125)						this->mGfx->beginFill(colour,(inPath->fill_alpha * inPath->alpha));
            					}
            					break;
            					case (int)2: {
            					}
            					break;
            				}
            			}
HXLINE( 131)			if (::hx::IsNotNull( inPath->stroke_colour )) {
HXLINE( 137)				 ::format::gfx::LineStyle style =  ::format::gfx::LineStyle_obj::__alloc( HX_CTX );
HXLINE( 138)				Float scale = (::Math_obj::sqrt(((m->a * m->a) + (m->d * m->d))) / ::format::svg::SVGRenderer_obj::SQRT2);
HXLINE( 139)				style->thickness = (inPath->stroke_width * scale);
HXLINE( 140)				style->alpha = (inPath->stroke_alpha * inPath->alpha);
HXLINE( 141)				style->color = ( (int)(inPath->stroke_colour) );
HXLINE( 142)				style->capsStyle = inPath->stroke_caps;
HXLINE( 143)				style->jointStyle = inPath->joint_style;
HXLINE( 144)				style->miterLimit = inPath->miter_limit;
HXLINE( 145)				this->mGfx->lineStyle(style);
            			}
            		}
HXLINE( 150)		{
HXLINE( 150)			int _g = 0;
HXDLIN( 150)			::Array< ::Dynamic> _g1 = inPath->segments;
HXDLIN( 150)			while((_g < _g1->length)){
HXLINE( 150)				 ::format::svg::PathSegment segment = _g1->__get(_g).StaticCast<  ::format::svg::PathSegment >();
HXDLIN( 150)				_g = (_g + 1);
HXLINE( 151)				segment->toGfx(this->mGfx,context);
            			}
            		}
HXLINE( 158)		this->mGfx->endLineStyle();
HXLINE( 159)		this->mGfx->endFill();
            	}


HX_DEFINE_DYNAMIC_FUNC1(SVGRenderer_obj,iteratePath,(void))

void SVGRenderer_obj::iterateGroup( ::format::svg::Group inGroup,bool inIgnoreDot){
            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_165_iterateGroup)
HXLINE( 167)		bool _hx_tmp;
HXDLIN( 167)		bool _hx_tmp1;
HXDLIN( 167)		if (inIgnoreDot) {
HXLINE( 167)			_hx_tmp1 = ::hx::IsNotNull( inGroup->name );
            		}
            		else {
HXLINE( 167)			_hx_tmp1 = false;
            		}
HXDLIN( 167)		if (_hx_tmp1) {
HXLINE( 167)			_hx_tmp = (inGroup->name.substr(0,1) == HX_(".",2e,00,00,00));
            		}
            		else {
HXLINE( 167)			_hx_tmp = false;
            		}
HXDLIN( 167)		if (_hx_tmp) {
HXLINE( 168)			return;
            		}
HXLINE( 170)		this->mGroupPath->push(inGroup->name);
HXLINE( 174)		{
HXLINE( 174)			int _g = 0;
HXDLIN( 174)			::Array< ::Dynamic> _g1 = inGroup->children;
HXDLIN( 174)			while((_g < _g1->length)){
HXLINE( 174)				 ::format::svg::DisplayElement child = _g1->__get(_g).StaticCast<  ::format::svg::DisplayElement >();
HXDLIN( 174)				_g = (_g + 1);
HXLINE( 176)				switch((int)(child->_hx_getIndex())){
            					case (int)0: {
HXLINE( 180)						 ::format::svg::Path path = child->_hx_getObject(0).StaticCast<  ::format::svg::Path >();
HXLINE( 181)						this->iteratePath(path);
            					}
            					break;
            					case (int)1: {
HXLINE( 178)						 ::format::svg::Group group = child->_hx_getObject(0).StaticCast<  ::format::svg::Group >();
HXLINE( 179)						this->iterateGroup(group,inIgnoreDot);
            					}
            					break;
            					case (int)2: {
HXLINE( 182)						 ::format::svg::Text text = child->_hx_getObject(0).StaticCast<  ::format::svg::Text >();
HXLINE( 183)						this->iterateText(text);
            					}
            					break;
            				}
            			}
            		}
HXLINE( 187)		this->mGroupPath->pop();
            	}


HX_DEFINE_DYNAMIC_FUNC2(SVGRenderer_obj,iterateGroup,(void))

void SVGRenderer_obj::render( ::openfl::display::Graphics inGfx, ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::openfl::geom::Rectangle inScaleRect, ::Dynamic inScaleW, ::Dynamic inScaleH){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_195_render)
HXLINE( 197)		this->mGfx =  ::format::gfx::GfxGraphics_obj::__alloc( HX_CTX ,inGfx);
HXLINE( 198)		if (::hx::IsNull( inMatrix )) {
HXLINE( 199)			this->mMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE( 201)			this->mMatrix = inMatrix->clone();
            		}
HXLINE( 203)		this->mScaleRect = inScaleRect;
HXLINE( 204)		this->mScaleW = inScaleW;
HXLINE( 205)		this->mScaleH = inScaleH;
HXLINE( 206)		this->mFilter = inFilter;
HXLINE( 207)		this->mGroupPath = ::Array_obj< ::String >::__new(0);
HXLINE( 209)		this->iterateGroup(this->mRoot,::hx::IsNull( inFilter ));
            	}


HX_DEFINE_DYNAMIC_FUNC6(SVGRenderer_obj,render,(void))

void SVGRenderer_obj::renderRect( ::openfl::display::Graphics inGfx, ::Dynamic inFilter, ::openfl::geom::Rectangle scaleRect, ::openfl::geom::Rectangle inBounds, ::openfl::geom::Rectangle inRect){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_212_renderRect)
HXLINE( 213)		 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 214)		matrix->tx = (inRect->x - inBounds->x);
HXLINE( 215)		matrix->ty = (inRect->y - inBounds->y);
HXLINE( 216)		if (::hx::IsNotNull( scaleRect )) {
HXLINE( 218)			Float extraX = (inRect->width - (inBounds->width - scaleRect->width));
HXLINE( 219)			Float extraY = (inRect->height - (inBounds->height - scaleRect->height));
HXLINE( 220)			this->render(inGfx,matrix,inFilter,scaleRect,extraX,extraY);
            		}
            		else {
HXLINE( 223)			this->render(inGfx,matrix,inFilter,null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(SVGRenderer_obj,renderRect,(void))

void SVGRenderer_obj::renderRect0( ::openfl::display::Graphics inGfx, ::Dynamic inFilter, ::openfl::geom::Rectangle scaleRect, ::openfl::geom::Rectangle inBounds, ::openfl::geom::Rectangle inRect){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_227_renderRect0)
HXLINE( 228)		 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 229)		matrix->tx = -(inBounds->x);
HXLINE( 230)		matrix->ty = -(inBounds->y);
HXLINE( 231)		if (::hx::IsNotNull( scaleRect )) {
HXLINE( 233)			Float extraX = (inRect->width - (inBounds->width - scaleRect->width));
HXLINE( 234)			Float extraY = (inRect->height - (inBounds->height - scaleRect->height));
HXLINE( 235)			this->render(inGfx,matrix,inFilter,scaleRect,extraX,extraY);
            		}
            		else {
HXLINE( 238)			this->render(inGfx,matrix,inFilter,null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(SVGRenderer_obj,renderRect0,(void))

 ::openfl::geom::Rectangle SVGRenderer_obj::getExtent( ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::Dynamic inIgnoreDot){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_246_getExtent)
HXLINE( 247)		if (::hx::IsNull( inIgnoreDot )) {
HXLINE( 248)			inIgnoreDot = ::hx::IsNull( inFilter );
            		}
HXLINE( 249)		 ::format::gfx::GfxExtent gfx =  ::format::gfx::GfxExtent_obj::__alloc( HX_CTX );
HXLINE( 250)		this->mGfx = gfx;
HXLINE( 251)		if (::hx::IsNull( inMatrix )) {
HXLINE( 252)			this->mMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE( 254)			this->mMatrix = inMatrix->clone();
            		}
HXLINE( 256)		this->mFilter = inFilter;
HXLINE( 257)		this->mGroupPath = ::Array_obj< ::String >::__new(0);
HXLINE( 259)		this->iterateGroup(this->mRoot,( (bool)(inIgnoreDot) ));
HXLINE( 261)		return gfx->extent;
            	}


HX_DEFINE_DYNAMIC_FUNC3(SVGRenderer_obj,getExtent,return )

 ::format::svg::Text SVGRenderer_obj::findText( ::Dynamic inFilter){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_265_findText)
HXLINE( 266)		this->mFilter = inFilter;
HXLINE( 267)		this->mGroupPath = ::Array_obj< ::String >::__new(0);
HXLINE( 268)		 ::format::gfx::GfxTextFinder finder =  ::format::gfx::GfxTextFinder_obj::__alloc( HX_CTX );
HXLINE( 269)		this->mGfx = finder;
HXLINE( 270)		this->iterateGroup(this->mRoot,false);
HXLINE( 271)		return finder->text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SVGRenderer_obj,findText,return )

 ::openfl::geom::Rectangle SVGRenderer_obj::getMatchingRect( ::EReg inMatch){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::EReg,inMatch) HXARGC(2)
            		bool _hx_run(::String _,::Array< ::String > groups){
            			HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_277_getMatchingRect)
HXLINE( 277)			if (::hx::IsNotNull( groups->__get(1) )) {
HXLINE( 277)				return inMatch->match(groups->__get(1));
            			}
            			else {
HXLINE( 277)				return false;
            			}
HXDLIN( 277)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_276_getMatchingRect)
HXDLIN( 276)		return this->getExtent(null(), ::Dynamic(new _hx_Closure_0(inMatch)),false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SVGRenderer_obj,getMatchingRect,return )

void SVGRenderer_obj::renderObject( ::openfl::display::DisplayObject inObj, ::openfl::display::Graphics inGfx, ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::openfl::geom::Rectangle inScale9){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		bool _hx_run(::String _,::Array< ::String > groups){
            			HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_285_renderObject)
HXLINE( 285)			return (groups->__get(1) == HX_(".scale9",1d,41,01,b5));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_283_renderObject)
HXLINE( 284)		this->render(inGfx,inMatrix,inFilter,inScale9,null(),null());
HXLINE( 285)		 ::openfl::geom::Rectangle rect = this->getExtent(inMatrix, ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC5(SVGRenderer_obj,renderObject,(void))

void SVGRenderer_obj::renderSprite( ::openfl::display::Sprite inObj, ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::openfl::geom::Rectangle inScale9){
            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_298_renderSprite)
HXDLIN( 298)		this->renderObject(inObj,inObj->get_graphics(),inMatrix,inFilter,inScale9);
            	}


HX_DEFINE_DYNAMIC_FUNC4(SVGRenderer_obj,renderSprite,(void))

 ::openfl::display::Shape SVGRenderer_obj::createShape( ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::openfl::geom::Rectangle inScale9){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_302_createShape)
HXLINE( 303)		 ::openfl::display::Shape shape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE( 304)		this->renderObject(shape,shape->get_graphics(),inMatrix,inFilter,inScale9);
HXLINE( 305)		return shape;
            	}


HX_DEFINE_DYNAMIC_FUNC3(SVGRenderer_obj,createShape,return )

 ::openfl::display::Shape SVGRenderer_obj::namedShape(::String inName){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::String,inName) HXARGC(2)
            		bool _hx_run(::String name,::Array< ::String > _){
            			HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_310_namedShape)
HXDLIN( 310)			return (name == inName);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_310_namedShape)
HXDLIN( 310)		return this->createShape(null(), ::Dynamic(new _hx_Closure_0(inName)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(SVGRenderer_obj,namedShape,return )

 ::openfl::display::BitmapData SVGRenderer_obj::renderBitmap( ::openfl::geom::Rectangle inRect,::hx::Null< Float >  __o_inScale){
            		Float inScale = __o_inScale.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_315_renderBitmap)
HXLINE( 316)		this->mMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,inScale,0,0,inScale,(-(inRect->x) * inScale),(-(inRect->y) * inScale));
HXLINE( 318)		Float w;
HXDLIN( 318)		if (::hx::IsNull( inRect )) {
HXLINE( 318)			w = this->width;
            		}
            		else {
HXLINE( 318)			w = (inRect->width * inScale);
            		}
HXDLIN( 318)		int w1 = ::Std_obj::_hx_int(( (Float)(::Math_obj::ceil(w)) ));
HXLINE( 319)		Float h;
HXDLIN( 319)		if (::hx::IsNull( inRect )) {
HXLINE( 319)			h = this->width;
            		}
            		else {
HXLINE( 319)			h = (inRect->height * inScale);
            		}
HXDLIN( 319)		int h1 = ::Std_obj::_hx_int(( (Float)(::Math_obj::ceil(h)) ));
HXLINE( 321)		 ::openfl::display::BitmapData bmp =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,w1,h1,true,0);
HXLINE( 323)		 ::openfl::display::Shape shape =  ::openfl::display::Shape_obj::__alloc( HX_CTX );
HXLINE( 324)		this->mGfx =  ::format::gfx::GfxGraphics_obj::__alloc( HX_CTX ,shape->get_graphics());
HXLINE( 326)		this->mGroupPath = ::Array_obj< ::String >::__new(0);
HXLINE( 327)		this->iterateGroup(this->mRoot,true);
HXLINE( 329)		bmp->draw(shape,null(),null(),null(),null(),null());
HXLINE( 330)		this->mGfx = null();
HXLINE( 332)		return bmp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SVGRenderer_obj,renderBitmap,return )

Float SVGRenderer_obj::SQRT2;

::Array< ::String > SVGRenderer_obj::toHaxe( ::Xml inXML, ::Dynamic inFilter){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_63_toHaxe)
HXDLIN(  63)		 ::format::svg::SVGRenderer _hx_tmp =  ::format::svg::SVGRenderer_obj::__alloc( HX_CTX , ::format::svg::SVGData_obj::__alloc( HX_CTX ,inXML,true),null());
HXDLIN(  63)		return _hx_tmp->iterate( ::format::gfx::Gfx2Haxe_obj::__alloc( HX_CTX ),inFilter).StaticCast<  ::format::gfx::Gfx2Haxe >()->commands;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SVGRenderer_obj,toHaxe,return )

 ::format::gfx::GfxBytes SVGRenderer_obj::toBytes( ::Xml inXML, ::Dynamic inFilter){
            	HX_GC_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_68_toBytes)
HXDLIN(  68)		 ::format::svg::SVGRenderer _hx_tmp =  ::format::svg::SVGRenderer_obj::__alloc( HX_CTX , ::format::svg::SVGData_obj::__alloc( HX_CTX ,inXML,true),null());
HXDLIN(  68)		return _hx_tmp->iterate( ::format::gfx::GfxBytes_obj::__alloc( HX_CTX ,null(),null()),inFilter).StaticCast<  ::format::gfx::GfxBytes >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SVGRenderer_obj,toBytes,return )


::hx::ObjectPtr< SVGRenderer_obj > SVGRenderer_obj::__new( ::format::svg::SVGData inSvg,::String inLayer) {
	::hx::ObjectPtr< SVGRenderer_obj > __this = new SVGRenderer_obj();
	__this->__construct(inSvg,inLayer);
	return __this;
}

::hx::ObjectPtr< SVGRenderer_obj > SVGRenderer_obj::__alloc(::hx::Ctx *_hx_ctx, ::format::svg::SVGData inSvg,::String inLayer) {
	SVGRenderer_obj *__this = (SVGRenderer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SVGRenderer_obj), true, "format.svg.SVGRenderer"));
	*(void **)__this = SVGRenderer_obj::_hx_vtable;
	__this->__construct(inSvg,inLayer);
	return __this;
}

SVGRenderer_obj::SVGRenderer_obj()
{
}

void SVGRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SVGRenderer);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(mSvg,"mSvg");
	HX_MARK_MEMBER_NAME(mRoot,"mRoot");
	HX_MARK_MEMBER_NAME(mGfx,"mGfx");
	HX_MARK_MEMBER_NAME(mMatrix,"mMatrix");
	HX_MARK_MEMBER_NAME(mScaleRect,"mScaleRect");
	HX_MARK_MEMBER_NAME(mScaleW,"mScaleW");
	HX_MARK_MEMBER_NAME(mScaleH,"mScaleH");
	HX_MARK_MEMBER_NAME(mFilter,"mFilter");
	HX_MARK_MEMBER_NAME(mGroupPath,"mGroupPath");
	HX_MARK_END_CLASS();
}

void SVGRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(mSvg,"mSvg");
	HX_VISIT_MEMBER_NAME(mRoot,"mRoot");
	HX_VISIT_MEMBER_NAME(mGfx,"mGfx");
	HX_VISIT_MEMBER_NAME(mMatrix,"mMatrix");
	HX_VISIT_MEMBER_NAME(mScaleRect,"mScaleRect");
	HX_VISIT_MEMBER_NAME(mScaleW,"mScaleW");
	HX_VISIT_MEMBER_NAME(mScaleH,"mScaleH");
	HX_VISIT_MEMBER_NAME(mFilter,"mFilter");
	HX_VISIT_MEMBER_NAME(mGroupPath,"mGroupPath");
}

::hx::Val SVGRenderer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mSvg") ) { return ::hx::Val( mSvg ); }
		if (HX_FIELD_EQ(inName,"mGfx") ) { return ::hx::Val( mGfx ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"mRoot") ) { return ::hx::Val( mRoot ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mMatrix") ) { return ::hx::Val( mMatrix ); }
		if (HX_FIELD_EQ(inName,"mScaleW") ) { return ::hx::Val( mScaleW ); }
		if (HX_FIELD_EQ(inName,"mScaleH") ) { return ::hx::Val( mScaleH ); }
		if (HX_FIELD_EQ(inName,"mFilter") ) { return ::hx::Val( mFilter ); }
		if (HX_FIELD_EQ(inName,"iterate") ) { return ::hx::Val( iterate_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasGroup") ) { return ::hx::Val( hasGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"findText") ) { return ::hx::Val( findText_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getExtent") ) { return ::hx::Val( getExtent_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mScaleRect") ) { return ::hx::Val( mScaleRect ); }
		if (HX_FIELD_EQ(inName,"mGroupPath") ) { return ::hx::Val( mGroupPath ); }
		if (HX_FIELD_EQ(inName,"renderRect") ) { return ::hx::Val( renderRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"namedShape") ) { return ::hx::Val( namedShape_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"iterateText") ) { return ::hx::Val( iterateText_dyn() ); }
		if (HX_FIELD_EQ(inName,"iteratePath") ) { return ::hx::Val( iteratePath_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderRect0") ) { return ::hx::Val( renderRect0_dyn() ); }
		if (HX_FIELD_EQ(inName,"createShape") ) { return ::hx::Val( createShape_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"iterateGroup") ) { return ::hx::Val( iterateGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderObject") ) { return ::hx::Val( renderObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderSprite") ) { return ::hx::Val( renderSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderBitmap") ) { return ::hx::Val( renderBitmap_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getMatchingRect") ) { return ::hx::Val( getMatchingRect_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SVGRenderer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SQRT2") ) { outValue = ( SQRT2 ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toHaxe") ) { outValue = toHaxe_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toBytes") ) { outValue = toBytes_dyn(); return true; }
	}
	return false;
}

::hx::Val SVGRenderer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mSvg") ) { mSvg=inValue.Cast<  ::format::svg::SVGData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mGfx") ) { mGfx=inValue.Cast<  ::format::gfx::Gfx >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mRoot") ) { mRoot=inValue.Cast<  ::format::svg::Group >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mMatrix") ) { mMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mScaleW") ) { mScaleW=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mScaleH") ) { mScaleH=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mFilter") ) { mFilter=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mScaleRect") ) { mScaleRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mGroupPath") ) { mGroupPath=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SVGRenderer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SQRT2") ) { SQRT2=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void SVGRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("mSvg",f7,a3,4b,48));
	outFields->push(HX_("mRoot",2f,55,35,f9));
	outFields->push(HX_("mGfx",0c,7b,42,48));
	outFields->push(HX_("mMatrix",8e,3a,00,a5));
	outFields->push(HX_("mScaleRect",a1,3e,a2,b0));
	outFields->push(HX_("mScaleW",da,ee,5d,25));
	outFields->push(HX_("mScaleH",cb,ee,5d,25));
	outFields->push(HX_("mGroupPath",57,ba,bb,5a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SVGRenderer_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(SVGRenderer_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(SVGRenderer_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::format::svg::SVGData */ ,(int)offsetof(SVGRenderer_obj,mSvg),HX_("mSvg",f7,a3,4b,48)},
	{::hx::fsObject /*  ::format::svg::Group */ ,(int)offsetof(SVGRenderer_obj,mRoot),HX_("mRoot",2f,55,35,f9)},
	{::hx::fsObject /*  ::format::gfx::Gfx */ ,(int)offsetof(SVGRenderer_obj,mGfx),HX_("mGfx",0c,7b,42,48)},
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(SVGRenderer_obj,mMatrix),HX_("mMatrix",8e,3a,00,a5)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(SVGRenderer_obj,mScaleRect),HX_("mScaleRect",a1,3e,a2,b0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SVGRenderer_obj,mScaleW),HX_("mScaleW",da,ee,5d,25)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SVGRenderer_obj,mScaleH),HX_("mScaleH",cb,ee,5d,25)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SVGRenderer_obj,mFilter),HX_("mFilter",05,24,6d,6e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(SVGRenderer_obj,mGroupPath),HX_("mGroupPath",57,ba,bb,5a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo SVGRenderer_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &SVGRenderer_obj::SQRT2,HX_("SQRT2",52,f0,0a,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String SVGRenderer_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("mSvg",f7,a3,4b,48),
	HX_("mRoot",2f,55,35,f9),
	HX_("mGfx",0c,7b,42,48),
	HX_("mMatrix",8e,3a,00,a5),
	HX_("mScaleRect",a1,3e,a2,b0),
	HX_("mScaleW",da,ee,5d,25),
	HX_("mScaleH",cb,ee,5d,25),
	HX_("mFilter",05,24,6d,6e),
	HX_("mGroupPath",57,ba,bb,5a),
	HX_("iterate",fa,79,d0,e2),
	HX_("hasGroup",85,fd,4c,26),
	HX_("iterateText",c7,f7,00,31),
	HX_("iteratePath",bf,10,59,2e),
	HX_("iterateGroup",e5,3e,33,3c),
	HX_("render",56,6b,29,05),
	HX_("renderRect",9a,47,b1,e8),
	HX_("renderRect0",56,5f,6d,b2),
	HX_("getExtent",20,5b,71,43),
	HX_("findText",86,d9,8d,9f),
	HX_("getMatchingRect",37,8e,a0,75),
	HX_("renderObject",b5,82,95,84),
	HX_("renderSprite",fb,df,eb,32),
	HX_("createShape",85,1a,98,a5),
	HX_("namedShape",a8,24,e5,5a),
	HX_("renderBitmap",e5,13,62,60),
	::String(null()) };

static void SVGRenderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SVGRenderer_obj::SQRT2,"SQRT2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SVGRenderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SVGRenderer_obj::SQRT2,"SQRT2");
};

#endif

::hx::Class SVGRenderer_obj::__mClass;

static ::String SVGRenderer_obj_sStaticFields[] = {
	HX_("SQRT2",52,f0,0a,00),
	HX_("toHaxe",41,9f,c1,7a),
	HX_("toBytes",f0,54,1c,8a),
	::String(null())
};

void SVGRenderer_obj::__register()
{
	SVGRenderer_obj _hx_dummy;
	SVGRenderer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.svg.SVGRenderer",66,1f,4e,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SVGRenderer_obj::__GetStatic;
	__mClass->mSetStaticField = &SVGRenderer_obj::__SetStatic;
	__mClass->mMarkFunc = SVGRenderer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SVGRenderer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SVGRenderer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SVGRenderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SVGRenderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SVGRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SVGRenderer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SVGRenderer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e402e6eaa78e99b2_32_boot)
HXDLIN(  32)		SQRT2 = ::Math_obj::sqrt(( (Float)(2) ));
            	}
}

} // end namespace format
} // end namespace svg
