// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_format_gfx_Gradient
#include <format/gfx/Gradient.h>
#endif
#ifndef INCLUDED_format_svg_Grad
#include <format/svg/Grad.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_553afa2802bd526f_23_new,"format.svg.Grad","new",0x60ea7ac1,"format.svg.Grad.new","format/svg/Grad.hx",23,0xce08b78d)
HX_LOCAL_STACK_FRAME(_hx_pos_553afa2802bd526f_35_updateMatrix,"format.svg.Grad","updateMatrix",0xe8075ea9,"format.svg.Grad.updateMatrix","format/svg/Grad.hx",35,0xce08b78d)
namespace format{
namespace svg{

void Grad_obj::__construct( ::Dynamic inType){
            	HX_GC_STACKFRAME(&_hx_pos_553afa2802bd526f_23_new)
HXLINE(  24)		super::__construct();
HXLINE(  25)		this->type = inType;
HXLINE(  26)		this->radius = ((Float)0.0);
HXLINE(  27)		this->gradMatrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  28)		this->x1 = ((Float)0.0);
HXLINE(  29)		this->y1 = ((Float)0.0);
HXLINE(  30)		this->x2 = ((Float)0.0);
HXLINE(  31)		this->y2 = ((Float)0.0);
            	}

Dynamic Grad_obj::__CreateEmpty() { return new Grad_obj; }

void *Grad_obj::_hx_vtable = 0;

Dynamic Grad_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Grad_obj > _hx_result = new Grad_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Grad_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x201404ea) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x201404ea;
	} else {
		return inClassId==(int)0x7fae38d3;
	}
}

void Grad_obj::updateMatrix( ::openfl::geom::Matrix inMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_553afa2802bd526f_35_updateMatrix)
HXLINE(  36)		Float dx = (this->x2 - this->x1);
HXLINE(  37)		Float dy = (this->y2 - this->y1);
HXLINE(  38)		Float theta = ::Math_obj::atan2(dy,dx);
HXLINE(  39)		Float len = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXLINE(  41)		 ::openfl::geom::Matrix mtx =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  43)		if (::hx::IsEq( this->type,0 )) {
HXLINE(  45)			mtx->createGradientBox(((Float)1.0),((Float)1.0),null(),null(),null());
HXLINE(  46)			mtx->scale(len,len);
            		}
            		else {
HXLINE(  50)			if ((this->radius != ((Float)0.0))) {
HXLINE(  51)				this->focus = (len / this->radius);
            			}
HXLINE(  53)			mtx->createGradientBox(((Float)1.0),((Float)1.0),null(),null(),null());
HXLINE(  54)			mtx->translate(((Float)-0.5),((Float)-0.5));
HXLINE(  55)			mtx->scale((this->radius * ( (Float)(2) )),(this->radius * ( (Float)(2) )));
            		}
HXLINE(  58)		mtx->rotate(theta);
HXLINE(  59)		mtx->translate(this->x1,this->y1);
HXLINE(  60)		mtx->concat(this->gradMatrix);
HXLINE(  61)		mtx->concat(inMatrix);
HXLINE(  62)		this->matrix = mtx;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Grad_obj,updateMatrix,(void))


::hx::ObjectPtr< Grad_obj > Grad_obj::__new( ::Dynamic inType) {
	::hx::ObjectPtr< Grad_obj > __this = new Grad_obj();
	__this->__construct(inType);
	return __this;
}

::hx::ObjectPtr< Grad_obj > Grad_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inType) {
	Grad_obj *__this = (Grad_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Grad_obj), true, "format.svg.Grad"));
	*(void **)__this = Grad_obj::_hx_vtable;
	__this->__construct(inType);
	return __this;
}

Grad_obj::Grad_obj()
{
}

void Grad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Grad);
	HX_MARK_MEMBER_NAME(gradMatrix,"gradMatrix");
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(x1,"x1");
	HX_MARK_MEMBER_NAME(y1,"y1");
	HX_MARK_MEMBER_NAME(x2,"x2");
	HX_MARK_MEMBER_NAME(y2,"y2");
	 ::format::gfx::Gradient_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Grad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gradMatrix,"gradMatrix");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(x1,"x1");
	HX_VISIT_MEMBER_NAME(y1,"y1");
	HX_VISIT_MEMBER_NAME(x2,"x2");
	HX_VISIT_MEMBER_NAME(y2,"y2");
	 ::format::gfx::Gradient_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Grad_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { return ::hx::Val( x1 ); }
		if (HX_FIELD_EQ(inName,"y1") ) { return ::hx::Val( y1 ); }
		if (HX_FIELD_EQ(inName,"x2") ) { return ::hx::Val( x2 ); }
		if (HX_FIELD_EQ(inName,"y2") ) { return ::hx::Val( y2 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { return ::hx::Val( radius ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gradMatrix") ) { return ::hx::Val( gradMatrix ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateMatrix") ) { return ::hx::Val( updateMatrix_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Grad_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { x1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gradMatrix") ) { gradMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Grad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gradMatrix",af,48,53,28));
	outFields->push(HX_("radius",52,d0,f6,b0));
	outFields->push(HX_("x1",b9,68,00,00));
	outFields->push(HX_("y1",98,69,00,00));
	outFields->push(HX_("x2",ba,68,00,00));
	outFields->push(HX_("y2",99,69,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Grad_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(Grad_obj,gradMatrix),HX_("gradMatrix",af,48,53,28)},
	{::hx::fsFloat,(int)offsetof(Grad_obj,radius),HX_("radius",52,d0,f6,b0)},
	{::hx::fsFloat,(int)offsetof(Grad_obj,x1),HX_("x1",b9,68,00,00)},
	{::hx::fsFloat,(int)offsetof(Grad_obj,y1),HX_("y1",98,69,00,00)},
	{::hx::fsFloat,(int)offsetof(Grad_obj,x2),HX_("x2",ba,68,00,00)},
	{::hx::fsFloat,(int)offsetof(Grad_obj,y2),HX_("y2",99,69,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Grad_obj_sStaticStorageInfo = 0;
#endif

static ::String Grad_obj_sMemberFields[] = {
	HX_("gradMatrix",af,48,53,28),
	HX_("radius",52,d0,f6,b0),
	HX_("x1",b9,68,00,00),
	HX_("y1",98,69,00,00),
	HX_("x2",ba,68,00,00),
	HX_("y2",99,69,00,00),
	HX_("updateMatrix",2a,dd,8b,bb),
	::String(null()) };

::hx::Class Grad_obj::__mClass;

void Grad_obj::__register()
{
	Grad_obj _hx_dummy;
	Grad_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.svg.Grad",4f,06,0c,68);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Grad_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Grad_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Grad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Grad_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace svg
