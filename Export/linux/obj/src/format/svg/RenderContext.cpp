// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_format_svg_RenderContext
#include <format/svg/RenderContext.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_57af1004931290fd_9_new,"format.svg.RenderContext","new",0x78fd478a,"format.svg.RenderContext.new","format/svg/RenderContext.hx",9,0x392eafa8)
HX_LOCAL_STACK_FRAME(_hx_pos_57af1004931290fd_20_transX,"format.svg.RenderContext","transX",0xa0a36a46,"format.svg.RenderContext.transX","format/svg/RenderContext.hx",20,0x392eafa8)
HX_LOCAL_STACK_FRAME(_hx_pos_57af1004931290fd_31_transY,"format.svg.RenderContext","transY",0xa0a36a47,"format.svg.RenderContext.transY","format/svg/RenderContext.hx",31,0x392eafa8)
HX_LOCAL_STACK_FRAME(_hx_pos_57af1004931290fd_44_setLast,"format.svg.RenderContext","setLast",0x6c369f42,"format.svg.RenderContext.setLast","format/svg/RenderContext.hx",44,0x392eafa8)
namespace format{
namespace svg{

void RenderContext_obj::__construct( ::openfl::geom::Matrix inMatrix, ::openfl::geom::Rectangle inRect, ::Dynamic inW, ::Dynamic inH){
            	HX_STACKFRAME(&_hx_pos_57af1004931290fd_9_new)
HXLINE(  10)		this->matrix = inMatrix;
HXLINE(  11)		this->rect = inRect;
HXLINE(  12)		Float _hx_tmp;
HXDLIN(  12)		if (::hx::IsNotNull( inW )) {
HXLINE(  12)			_hx_tmp = ( (Float)(inW) );
            		}
            		else {
HXLINE(  12)			if (::hx::IsNotNull( inRect )) {
HXLINE(  12)				_hx_tmp = inRect->width;
            			}
            			else {
HXLINE(  12)				_hx_tmp = ( (Float)(1) );
            			}
            		}
HXDLIN(  12)		this->rectW = _hx_tmp;
HXLINE(  13)		Float _hx_tmp1;
HXDLIN(  13)		if (::hx::IsNotNull( inH )) {
HXLINE(  13)			_hx_tmp1 = ( (Float)(inH) );
            		}
            		else {
HXLINE(  13)			if (::hx::IsNotNull( inRect )) {
HXLINE(  13)				_hx_tmp1 = inRect->height;
            			}
            			else {
HXLINE(  13)				_hx_tmp1 = ( (Float)(1) );
            			}
            		}
HXDLIN(  13)		this->rectH = _hx_tmp1;
HXLINE(  14)		this->firstX = ( (Float)(0) );
HXLINE(  15)		this->firstY = ( (Float)(0) );
HXLINE(  16)		this->lastX = ( (Float)(0) );
HXLINE(  17)		this->lastY = ( (Float)(0) );
            	}

Dynamic RenderContext_obj::__CreateEmpty() { return new RenderContext_obj; }

void *RenderContext_obj::_hx_vtable = 0;

Dynamic RenderContext_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RenderContext_obj > _hx_result = new RenderContext_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool RenderContext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d8abd10;
}

Float RenderContext_obj::transX(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_57af1004931290fd_20_transX)
HXLINE(  21)		bool _hx_tmp;
HXDLIN(  21)		if (::hx::IsNotNull( this->rect )) {
HXLINE(  21)			_hx_tmp = (inX > this->rect->x);
            		}
            		else {
HXLINE(  21)			_hx_tmp = false;
            		}
HXDLIN(  21)		if (_hx_tmp) {
HXLINE(  23)			if ((inX > this->rect->get_right())) {
HXLINE(  24)				inX = (inX + (this->rectW - this->rect->width));
            			}
            			else {
HXLINE(  26)				inX = (this->rect->x + ((this->rectW * (inX - this->rect->x)) / this->rect->width));
            			}
            		}
HXLINE(  28)		return (((inX * this->matrix->a) + (inY * this->matrix->c)) + this->matrix->tx);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderContext_obj,transX,return )

Float RenderContext_obj::transY(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_57af1004931290fd_31_transY)
HXLINE(  32)		bool _hx_tmp;
HXDLIN(  32)		if (::hx::IsNotNull( this->rect )) {
HXLINE(  32)			_hx_tmp = (inY > this->rect->y);
            		}
            		else {
HXLINE(  32)			_hx_tmp = false;
            		}
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  34)			if ((inY > this->rect->get_right())) {
HXLINE(  35)				inY = (inY + (this->rectH - this->rect->height));
            			}
            			else {
HXLINE(  37)				inY = (this->rect->y + ((this->rectH * (inY - this->rect->y)) / this->rect->height));
            			}
            		}
HXLINE(  39)		return (((inX * this->matrix->b) + (inY * this->matrix->d)) + this->matrix->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderContext_obj,transY,return )

void RenderContext_obj::setLast(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_57af1004931290fd_44_setLast)
HXLINE(  45)		this->lastX = this->transX(inX,inY);
HXLINE(  46)		this->lastY = this->transY(inX,inY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderContext_obj,setLast,(void))


::hx::ObjectPtr< RenderContext_obj > RenderContext_obj::__new( ::openfl::geom::Matrix inMatrix, ::openfl::geom::Rectangle inRect, ::Dynamic inW, ::Dynamic inH) {
	::hx::ObjectPtr< RenderContext_obj > __this = new RenderContext_obj();
	__this->__construct(inMatrix,inRect,inW,inH);
	return __this;
}

::hx::ObjectPtr< RenderContext_obj > RenderContext_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::geom::Matrix inMatrix, ::openfl::geom::Rectangle inRect, ::Dynamic inW, ::Dynamic inH) {
	RenderContext_obj *__this = (RenderContext_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RenderContext_obj), true, "format.svg.RenderContext"));
	*(void **)__this = RenderContext_obj::_hx_vtable;
	__this->__construct(inMatrix,inRect,inW,inH);
	return __this;
}

RenderContext_obj::RenderContext_obj()
{
}

void RenderContext_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderContext);
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(rectW,"rectW");
	HX_MARK_MEMBER_NAME(rectH,"rectH");
	HX_MARK_MEMBER_NAME(firstX,"firstX");
	HX_MARK_MEMBER_NAME(firstY,"firstY");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	HX_MARK_END_CLASS();
}

void RenderContext_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(rectW,"rectW");
	HX_VISIT_MEMBER_NAME(rectH,"rectH");
	HX_VISIT_MEMBER_NAME(firstX,"firstX");
	HX_VISIT_MEMBER_NAME(firstY,"firstY");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
}

::hx::Val RenderContext_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return ::hx::Val( rect ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"rectW") ) { return ::hx::Val( rectW ); }
		if (HX_FIELD_EQ(inName,"rectH") ) { return ::hx::Val( rectH ); }
		if (HX_FIELD_EQ(inName,"lastX") ) { return ::hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return ::hx::Val( lastY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"transX") ) { return ::hx::Val( transX_dyn() ); }
		if (HX_FIELD_EQ(inName,"transY") ) { return ::hx::Val( transY_dyn() ); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return ::hx::Val( matrix ); }
		if (HX_FIELD_EQ(inName,"firstX") ) { return ::hx::Val( firstX ); }
		if (HX_FIELD_EQ(inName,"firstY") ) { return ::hx::Val( firstY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setLast") ) { return ::hx::Val( setLast_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val RenderContext_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"rectW") ) { rectW=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rectH") ) { rectH=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"firstX") ) { firstX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"firstY") ) { firstY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RenderContext_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("matrix",41,36,c8,bb));
	outFields->push(HX_("rect",24,4d,a7,4b));
	outFields->push(HX_("rectW",b3,32,bc,e6));
	outFields->push(HX_("rectH",a4,32,bc,e6));
	outFields->push(HX_("firstX",28,b2,2b,89));
	outFields->push(HX_("firstY",29,b2,2b,89));
	outFields->push(HX_("lastX",42,01,bc,6f));
	outFields->push(HX_("lastY",43,01,bc,6f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo RenderContext_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(RenderContext_obj,matrix),HX_("matrix",41,36,c8,bb)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(RenderContext_obj,rect),HX_("rect",24,4d,a7,4b)},
	{::hx::fsFloat,(int)offsetof(RenderContext_obj,rectW),HX_("rectW",b3,32,bc,e6)},
	{::hx::fsFloat,(int)offsetof(RenderContext_obj,rectH),HX_("rectH",a4,32,bc,e6)},
	{::hx::fsFloat,(int)offsetof(RenderContext_obj,firstX),HX_("firstX",28,b2,2b,89)},
	{::hx::fsFloat,(int)offsetof(RenderContext_obj,firstY),HX_("firstY",29,b2,2b,89)},
	{::hx::fsFloat,(int)offsetof(RenderContext_obj,lastX),HX_("lastX",42,01,bc,6f)},
	{::hx::fsFloat,(int)offsetof(RenderContext_obj,lastY),HX_("lastY",43,01,bc,6f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *RenderContext_obj_sStaticStorageInfo = 0;
#endif

static ::String RenderContext_obj_sMemberFields[] = {
	HX_("transX",30,8b,85,45),
	HX_("transY",31,8b,85,45),
	HX_("setLast",18,4b,31,0d),
	HX_("matrix",41,36,c8,bb),
	HX_("rect",24,4d,a7,4b),
	HX_("rectW",b3,32,bc,e6),
	HX_("rectH",a4,32,bc,e6),
	HX_("firstX",28,b2,2b,89),
	HX_("firstY",29,b2,2b,89),
	HX_("lastX",42,01,bc,6f),
	HX_("lastY",43,01,bc,6f),
	::String(null()) };

::hx::Class RenderContext_obj::__mClass;

void RenderContext_obj::__register()
{
	RenderContext_obj _hx_dummy;
	RenderContext_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.svg.RenderContext",98,7a,94,18);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RenderContext_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RenderContext_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderContext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderContext_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace svg
