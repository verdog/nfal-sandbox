// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_format_gfx_Gfx
#include <format/gfx/Gfx.h>
#endif
#ifndef INCLUDED_format_gfx_GfxExtent
#include <format/gfx/GfxExtent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1b9695c20c8234c9_11_new,"format.gfx.GfxExtent","new",0xe8f6c9e9,"format.gfx.GfxExtent.new","format/gfx/GfxExtent.hx",11,0x8292f529)
HX_LOCAL_STACK_FRAME(_hx_pos_1b9695c20c8234c9_17_addExtent,"format.gfx.GfxExtent","addExtent",0x2edf4d34,"format.gfx.GfxExtent.addExtent","format/gfx/GfxExtent.hx",17,0x8292f529)
HX_LOCAL_STACK_FRAME(_hx_pos_1b9695c20c8234c9_30_geometryOnly,"format.gfx.GfxExtent","geometryOnly",0xa3c10295,"format.gfx.GfxExtent.geometryOnly","format/gfx/GfxExtent.hx",30,0x8292f529)
HX_LOCAL_STACK_FRAME(_hx_pos_1b9695c20c8234c9_33_moveTo,"format.gfx.GfxExtent","moveTo",0x65f9b503,"format.gfx.GfxExtent.moveTo","format/gfx/GfxExtent.hx",33,0x8292f529)
HX_LOCAL_STACK_FRAME(_hx_pos_1b9695c20c8234c9_37_lineTo,"format.gfx.GfxExtent","lineTo",0x85ed28a6,"format.gfx.GfxExtent.lineTo","format/gfx/GfxExtent.hx",37,0x8292f529)
HX_LOCAL_STACK_FRAME(_hx_pos_1b9695c20c8234c9_40_curveTo,"format.gfx.GfxExtent","curveTo",0x58815213,"format.gfx.GfxExtent.curveTo","format/gfx/GfxExtent.hx",40,0x8292f529)
namespace format{
namespace gfx{

void GfxExtent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1b9695c20c8234c9_11_new)
HXLINE(  12)		super::__construct();
HXLINE(  13)		this->extent = null();
            	}

Dynamic GfxExtent_obj::__CreateEmpty() { return new GfxExtent_obj; }

void *GfxExtent_obj::_hx_vtable = 0;

Dynamic GfxExtent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GfxExtent_obj > _hx_result = new GfxExtent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GfxExtent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x39b05f41) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x39b05f41;
	} else {
		return inClassId==(int)0x79a02eff;
	}
}

void GfxExtent_obj::addExtent(Float inX,Float inY){
            	HX_GC_STACKFRAME(&_hx_pos_1b9695c20c8234c9_17_addExtent)
HXLINE(  18)		if (::hx::IsNull( this->extent )) {
HXLINE(  20)			this->extent =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,inX,inY,0,0);
HXLINE(  21)			return;
            		}
HXLINE(  23)		if ((inX < this->extent->get_left())) {
HXLINE(  23)			this->extent->set_left(inX);
            		}
HXLINE(  24)		if ((inX > this->extent->get_right())) {
HXLINE(  24)			this->extent->set_right(inX);
            		}
HXLINE(  25)		if ((inY < this->extent->get_top())) {
HXLINE(  25)			this->extent->set_top(inY);
            		}
HXLINE(  26)		if ((inY > this->extent->get_bottom())) {
HXLINE(  26)			this->extent->set_bottom(inY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(GfxExtent_obj,addExtent,(void))

bool GfxExtent_obj::geometryOnly(){
            	HX_STACKFRAME(&_hx_pos_1b9695c20c8234c9_30_geometryOnly)
HXDLIN(  30)		return true;
            	}


void GfxExtent_obj::moveTo(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_1b9695c20c8234c9_33_moveTo)
HXDLIN(  33)		this->addExtent(inX,inY);
            	}


void GfxExtent_obj::lineTo(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_1b9695c20c8234c9_37_lineTo)
HXDLIN(  37)		this->addExtent(inX,inY);
            	}


void GfxExtent_obj::curveTo(Float inCX,Float inCY,Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_1b9695c20c8234c9_40_curveTo)
HXLINE(  41)		this->addExtent(inCX,inCY);
HXLINE(  42)		this->addExtent(inX,inY);
            	}



::hx::ObjectPtr< GfxExtent_obj > GfxExtent_obj::__new() {
	::hx::ObjectPtr< GfxExtent_obj > __this = new GfxExtent_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< GfxExtent_obj > GfxExtent_obj::__alloc(::hx::Ctx *_hx_ctx) {
	GfxExtent_obj *__this = (GfxExtent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GfxExtent_obj), true, "format.gfx.GfxExtent"));
	*(void **)__this = GfxExtent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GfxExtent_obj::GfxExtent_obj()
{
}

void GfxExtent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GfxExtent);
	HX_MARK_MEMBER_NAME(extent,"extent");
	HX_MARK_END_CLASS();
}

void GfxExtent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(extent,"extent");
}

::hx::Val GfxExtent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"extent") ) { return ::hx::Val( extent ); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return ::hx::Val( moveTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return ::hx::Val( lineTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curveTo") ) { return ::hx::Val( curveTo_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addExtent") ) { return ::hx::Val( addExtent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"geometryOnly") ) { return ::hx::Val( geometryOnly_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GfxExtent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"extent") ) { extent=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GfxExtent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("extent",ea,d1,1a,c7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GfxExtent_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(GfxExtent_obj,extent),HX_("extent",ea,d1,1a,c7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GfxExtent_obj_sStaticStorageInfo = 0;
#endif

static ::String GfxExtent_obj_sMemberFields[] = {
	HX_("extent",ea,d1,1a,c7),
	HX_("addExtent",eb,06,3f,7f),
	HX_("geometryOnly",3e,f5,30,5a),
	HX_("moveTo",ec,d2,ac,cc),
	HX_("lineTo",8f,46,a0,ec),
	HX_("curveTo",0a,60,88,ce),
	::String(null()) };

::hx::Class GfxExtent_obj::__mClass;

void GfxExtent_obj::__register()
{
	GfxExtent_obj _hx_dummy;
	GfxExtent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.gfx.GfxExtent",77,a1,a7,e2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GfxExtent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GfxExtent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GfxExtent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GfxExtent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace gfx
