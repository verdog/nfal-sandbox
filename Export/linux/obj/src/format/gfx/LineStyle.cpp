// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_format_gfx_LineStyle
#include <format/gfx/LineStyle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3d74439f11cb390c_19_new,"format.gfx.LineStyle","new",0x5ea5ff43,"format.gfx.LineStyle.new","format/gfx/LineStyle.hx",19,0xb351290f)
namespace format{
namespace gfx{

void LineStyle_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3d74439f11cb390c_19_new)
HXLINE(  20)		this->thickness = ((Float)1.0);
HXLINE(  21)		this->color = 0;
HXLINE(  22)		this->alpha = ((Float)1.0);
HXLINE(  23)		this->pixelHinting = false;
HXLINE(  24)		this->scaleMode = 2;
HXLINE(  25)		this->capsStyle = 1;
HXLINE(  26)		this->jointStyle = 2;
HXLINE(  27)		this->miterLimit = ((Float)3.0);
            	}

Dynamic LineStyle_obj::__CreateEmpty() { return new LineStyle_obj; }

void *LineStyle_obj::_hx_vtable = 0;

Dynamic LineStyle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LineStyle_obj > _hx_result = new LineStyle_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LineStyle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x68a26bff;
}


LineStyle_obj::LineStyle_obj()
{
}

void LineStyle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LineStyle);
	HX_MARK_MEMBER_NAME(thickness,"thickness");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(pixelHinting,"pixelHinting");
	HX_MARK_MEMBER_NAME(scaleMode,"scaleMode");
	HX_MARK_MEMBER_NAME(capsStyle,"capsStyle");
	HX_MARK_MEMBER_NAME(jointStyle,"jointStyle");
	HX_MARK_MEMBER_NAME(miterLimit,"miterLimit");
	HX_MARK_END_CLASS();
}

void LineStyle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(thickness,"thickness");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(pixelHinting,"pixelHinting");
	HX_VISIT_MEMBER_NAME(scaleMode,"scaleMode");
	HX_VISIT_MEMBER_NAME(capsStyle,"capsStyle");
	HX_VISIT_MEMBER_NAME(jointStyle,"jointStyle");
	HX_VISIT_MEMBER_NAME(miterLimit,"miterLimit");
}

::hx::Val LineStyle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thickness") ) { return ::hx::Val( thickness ); }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { return ::hx::Val( scaleMode ); }
		if (HX_FIELD_EQ(inName,"capsStyle") ) { return ::hx::Val( capsStyle ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"jointStyle") ) { return ::hx::Val( jointStyle ); }
		if (HX_FIELD_EQ(inName,"miterLimit") ) { return ::hx::Val( miterLimit ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pixelHinting") ) { return ::hx::Val( pixelHinting ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LineStyle_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"thickness") ) { thickness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleMode") ) { scaleMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"capsStyle") ) { capsStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"jointStyle") ) { jointStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"miterLimit") ) { miterLimit=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pixelHinting") ) { pixelHinting=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineStyle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("thickness",74,f1,66,5a));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("pixelHinting",d5,9b,fb,6c));
	outFields->push(HX_("scaleMode",0d,db,d3,2b));
	outFields->push(HX_("capsStyle",50,61,32,83));
	outFields->push(HX_("jointStyle",87,ef,1c,e2));
	outFields->push(HX_("miterLimit",f6,5c,6a,54));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LineStyle_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(LineStyle_obj,thickness),HX_("thickness",74,f1,66,5a)},
	{::hx::fsInt,(int)offsetof(LineStyle_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsFloat,(int)offsetof(LineStyle_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{::hx::fsBool,(int)offsetof(LineStyle_obj,pixelHinting),HX_("pixelHinting",d5,9b,fb,6c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LineStyle_obj,scaleMode),HX_("scaleMode",0d,db,d3,2b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LineStyle_obj,capsStyle),HX_("capsStyle",50,61,32,83)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LineStyle_obj,jointStyle),HX_("jointStyle",87,ef,1c,e2)},
	{::hx::fsFloat,(int)offsetof(LineStyle_obj,miterLimit),HX_("miterLimit",f6,5c,6a,54)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LineStyle_obj_sStaticStorageInfo = 0;
#endif

static ::String LineStyle_obj_sMemberFields[] = {
	HX_("thickness",74,f1,66,5a),
	HX_("color",63,71,5c,4a),
	HX_("alpha",5e,a7,96,21),
	HX_("pixelHinting",d5,9b,fb,6c),
	HX_("scaleMode",0d,db,d3,2b),
	HX_("capsStyle",50,61,32,83),
	HX_("jointStyle",87,ef,1c,e2),
	HX_("miterLimit",f6,5c,6a,54),
	::String(null()) };

::hx::Class LineStyle_obj::__mClass;

void LineStyle_obj::__register()
{
	LineStyle_obj _hx_dummy;
	LineStyle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.gfx.LineStyle",d1,a1,c6,8a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LineStyle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LineStyle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineStyle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineStyle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace gfx
