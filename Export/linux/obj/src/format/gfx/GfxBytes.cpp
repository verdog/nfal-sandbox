// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_format_gfx_Gfx
#include <format/gfx/Gfx.h>
#endif
#ifndef INCLUDED_format_gfx_GfxBytes
#include <format/gfx/GfxBytes.h>
#endif
#ifndef INCLUDED_format_gfx_Gradient
#include <format/gfx/Gradient.h>
#endif
#ifndef INCLUDED_format_gfx_LineStyle
#include <format/gfx/LineStyle.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_crypto_BaseCode
#include <haxe/crypto/BaseCode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3f036dca2a1c940c_45_new,"format.gfx.GfxBytes","new",0x2d296170,"format.gfx.GfxBytes.new","format/gfx/GfxBytes.hx",45,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_51_toString,"format.gfx.GfxBytes","toString",0x8c81659c,"format.gfx.GfxBytes.toString","format/gfx/GfxBytes.hx",51,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_91_eof,"format.gfx.GfxBytes","eof",0x2d2295cc,"format.gfx.GfxBytes.eof","format/gfx/GfxBytes.hx",91,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_100_iterate,"format.gfx.GfxBytes","iterate",0xeeabd30a,"format.gfx.GfxBytes.iterate","format/gfx/GfxBytes.hx",100,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_197_size,"format.gfx.GfxBytes","size",0x5a5cfdb1,"format.gfx.GfxBytes.size","format/gfx/GfxBytes.hx",197,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_205_pushClipped,"format.gfx.GfxBytes","pushClipped",0x87c68e55,"format.gfx.GfxBytes.pushClipped","format/gfx/GfxBytes.hx",205,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_208_writeRGB,"format.gfx.GfxBytes","writeRGB",0x7809b45e,"format.gfx.GfxBytes.writeRGB","format/gfx/GfxBytes.hx",208,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_214_readRGB,"format.gfx.GfxBytes","readRGB",0x0eabbe67,"format.gfx.GfxBytes.readRGB","format/gfx/GfxBytes.hx",214,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_224_beginGradientFill,"format.gfx.GfxBytes","beginGradientFill",0x1ace896c,"format.gfx.GfxBytes.beginGradientFill","format/gfx/GfxBytes.hx",224,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_255_beginFill,"format.gfx.GfxBytes","beginFill",0xc8c56a5c,"format.gfx.GfxBytes.beginFill","format/gfx/GfxBytes.hx",255,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_262_endFill,"format.gfx.GfxBytes","endFill",0x31bbe10e,"format.gfx.GfxBytes.endFill","format/gfx/GfxBytes.hx",262,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_266_lineStyle,"format.gfx.GfxBytes","lineStyle",0x074865ad,"format.gfx.GfxBytes.lineStyle","format/gfx/GfxBytes.hx",266,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_286_endLineStyle,"format.gfx.GfxBytes","endLineStyle",0x1d327e32,"format.gfx.GfxBytes.endLineStyle","format/gfx/GfxBytes.hx",286,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_290_moveTo,"format.gfx.GfxBytes","moveTo",0x757b4bdc,"format.gfx.GfxBytes.moveTo","format/gfx/GfxBytes.hx",290,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_297_lineTo,"format.gfx.GfxBytes","lineTo",0x956ebf7f,"format.gfx.GfxBytes.lineTo","format/gfx/GfxBytes.hx",297,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_304_curveTo,"format.gfx.GfxBytes","curveTo",0xda63b91a,"format.gfx.GfxBytes.curveTo","format/gfx/GfxBytes.hx",304,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_74_fromString,"format.gfx.GfxBytes","fromString",0xc209decb,"format.gfx.GfxBytes.fromString","format/gfx/GfxBytes.hx",74,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_24_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",24,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_25_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",25,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_27_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",27,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_28_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",28,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_29_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",29,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_31_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",31,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_32_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",32,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_34_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",34,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_35_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",35,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_36_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",36,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_41_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",41,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_93_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",93,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_94_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",94,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_95_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",95,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_96_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",96,0x1ef332be)
HX_LOCAL_STACK_FRAME(_hx_pos_3f036dca2a1c940c_97_boot,"format.gfx.GfxBytes","boot",0x4f24e122,"format.gfx.GfxBytes.boot","format/gfx/GfxBytes.hx",97,0x1ef332be)
namespace format{
namespace gfx{

void GfxBytes_obj::__construct( ::openfl::utils::ByteArrayData inBuffer,::hx::Null< int >  __o_inFlags){
            		int inFlags = __o_inFlags.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_3f036dca2a1c940c_45_new)
HXLINE(  46)		super::__construct();
HXLINE(  47)		 ::openfl::utils::ByteArrayData _hx_tmp;
HXDLIN(  47)		if (::hx::IsNull( inBuffer )) {
HXLINE(  47)			 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXDLIN(  47)			_hx_tmp = this1;
            		}
            		else {
HXLINE(  47)			_hx_tmp = inBuffer;
            		}
HXDLIN(  47)		this->buffer = _hx_tmp;
            	}

Dynamic GfxBytes_obj::__CreateEmpty() { return new GfxBytes_obj; }

void *GfxBytes_obj::_hx_vtable = 0;

Dynamic GfxBytes_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GfxBytes_obj > _hx_result = new GfxBytes_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GfxBytes_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x46b7b2f4) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x46b7b2f4;
	} else {
		return inClassId==(int)0x79a02eff;
	}
}

::String GfxBytes_obj::toString(){
            	HX_GC_STACKFRAME(&_hx_pos_3f036dca2a1c940c_51_toString)
HXLINE(  59)		 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(this->buffer));
HXDLIN(  59)		 ::openfl::utils::ByteArrayData buf = this1;
HXLINE(  61)		this->buffer->position = 0;
HXLINE(  62)		this->buffer->readBytes(buf,0,0);
HXLINE(  63)		{
HXLINE(  63)			 ::Dynamic algorithm = null();
HXDLIN(  63)			buf->compress(algorithm);
            		}
HXLINE(  64)		if (::hx::IsNull( ::format::gfx::GfxBytes_obj::baseCoder )) {
HXLINE(  65)			::format::gfx::GfxBytes_obj::baseCoder =  ::haxe::crypto::BaseCode_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::ofString(::format::gfx::GfxBytes_obj::base64,null()));
            		}
HXLINE(  69)		 ::haxe::crypto::BaseCode _hx_tmp = ::format::gfx::GfxBytes_obj::baseCoder;
HXDLIN(  69)		return _hx_tmp->encodeBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(buf))->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GfxBytes_obj,toString,return )

void GfxBytes_obj::eof(){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_91_eof)
HXDLIN(  91)		this->buffer->writeByte(0);
            	}


void GfxBytes_obj::iterate( ::format::gfx::Gfx inGfx){
            	HX_GC_STACKFRAME(&_hx_pos_3f036dca2a1c940c_100_iterate)
HXLINE( 101)		this->buffer->position = 0;
HXLINE( 102)		while(true){
HXLINE( 104)			switch((int)(this->buffer->readByte())){
            				case (int)0: {
HXLINE( 107)					return;
            				}
            				break;
            				case (int)1: {
HXLINE( 110)					Float w = this->buffer->readFloat();
HXLINE( 111)					Float h = this->buffer->readFloat();
HXLINE( 112)					inGfx->size(w,h);
            				}
            				break;
            				case (int)10: {
HXLINE( 115)					int col = this->readRGB();
HXLINE( 116)					Float alpha = this->buffer->readFloat();
HXLINE( 117)					inGfx->beginFill(col,alpha);
            				}
            				break;
            				case (int)11: {
HXLINE( 120)					 ::format::gfx::Gradient grad =  ::format::gfx::Gradient_obj::__alloc( HX_CTX );
HXLINE( 124)					grad->type = this->buffer->readByte();
HXLINE( 126)					int len = this->buffer->readByte();
HXLINE( 127)					{
HXLINE( 127)						int _g = 0;
HXDLIN( 127)						int _g1 = len;
HXDLIN( 127)						while((_g < _g1)){
HXLINE( 127)							_g = (_g + 1);
HXDLIN( 127)							int i = (_g - 1);
HXLINE( 129)							::Array< int > grad1 = grad->colors;
HXDLIN( 129)							grad1->push(this->readRGB());
HXLINE( 130)							::Array< Float > grad2 = grad->alphas;
HXDLIN( 130)							grad2->push((( (Float)(this->buffer->readByte()) ) / ((Float)255.0)));
HXLINE( 131)							::Array< int > grad3 = grad->ratios;
HXDLIN( 131)							grad3->push(this->buffer->readByte());
            						}
            					}
HXLINE( 133)					Float _hx_tmp = this->buffer->readFloat();
HXDLIN( 133)					grad->matrix->a = _hx_tmp;
HXLINE( 134)					Float _hx_tmp1 = this->buffer->readFloat();
HXDLIN( 134)					grad->matrix->b = _hx_tmp1;
HXLINE( 135)					Float _hx_tmp2 = this->buffer->readFloat();
HXDLIN( 135)					grad->matrix->c = _hx_tmp2;
HXLINE( 136)					Float _hx_tmp3 = this->buffer->readFloat();
HXDLIN( 136)					grad->matrix->d = _hx_tmp3;
HXLINE( 137)					Float _hx_tmp4 = this->buffer->readFloat();
HXDLIN( 137)					grad->matrix->tx = _hx_tmp4;
HXLINE( 138)					Float _hx_tmp5 = this->buffer->readFloat();
HXDLIN( 138)					grad->matrix->ty = _hx_tmp5;
HXLINE( 143)					grad->spread = this->buffer->readByte();
HXLINE( 144)					grad->interp = this->buffer->readByte();
HXLINE( 146)					grad->focus = this->buffer->readFloat();
HXLINE( 147)					inGfx->beginGradientFill(grad);
            				}
            				break;
            				case (int)12: {
HXLINE( 150)					inGfx->endFill();
            				}
            				break;
            				case (int)20: {
HXLINE( 153)					 ::format::gfx::LineStyle style =  ::format::gfx::LineStyle_obj::__alloc( HX_CTX );
HXLINE( 154)					style->thickness = this->buffer->readFloat();
HXLINE( 155)					style->color = this->readRGB();
HXLINE( 156)					style->alpha = this->buffer->readFloat();
HXLINE( 157)					style->pixelHinting = (this->buffer->readByte() > 0);
HXLINE( 163)					style->scaleMode = this->buffer->readByte();
HXLINE( 164)					style->capsStyle = this->buffer->readByte();
HXLINE( 165)					style->jointStyle = this->buffer->readByte();
HXLINE( 167)					style->miterLimit = this->buffer->readFloat();
HXLINE( 168)					inGfx->lineStyle(style);
            				}
            				break;
            				case (int)21: {
HXLINE( 171)					inGfx->endLineStyle();
            				}
            				break;
            				case (int)30: {
HXLINE( 174)					Float x = this->buffer->readFloat();
HXLINE( 175)					Float y = this->buffer->readFloat();
HXLINE( 176)					inGfx->moveTo(x,y);
            				}
            				break;
            				case (int)31: {
HXLINE( 179)					Float x = this->buffer->readFloat();
HXLINE( 180)					Float y = this->buffer->readFloat();
HXLINE( 181)					inGfx->lineTo(x,y);
            				}
            				break;
            				case (int)32: {
HXLINE( 184)					Float cx = this->buffer->readFloat();
HXLINE( 185)					Float cy = this->buffer->readFloat();
HXLINE( 186)					Float x = this->buffer->readFloat();
HXLINE( 187)					Float y = this->buffer->readFloat();
HXLINE( 188)					inGfx->curveTo(cx,cy,x,y);
            				}
            				break;
            				default:{
HXLINE( 190)					HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("Unknown gfx buffer format.",b4,0f,36,1a)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GfxBytes_obj,iterate,(void))

void GfxBytes_obj::size(Float inWidth,Float inHeight){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_197_size)
HXLINE( 198)		this->buffer->writeByte(1);
HXLINE( 199)		this->buffer->writeFloat(inWidth);
HXLINE( 200)		this->buffer->writeFloat(inHeight);
            	}


void GfxBytes_obj::pushClipped(Float inVal){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_205_pushClipped)
HXDLIN( 205)		 ::openfl::utils::ByteArrayData this1 = this->buffer;
HXDLIN( 205)		int value;
HXDLIN( 205)		if ((inVal < 0)) {
HXDLIN( 205)			value = 0;
            		}
            		else {
HXDLIN( 205)			if ((inVal > ((Float)255.0))) {
HXDLIN( 205)				value = 255;
            			}
            			else {
HXDLIN( 205)				value = ::Std_obj::_hx_int(inVal);
            			}
            		}
HXDLIN( 205)		this1->writeByte(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GfxBytes_obj,pushClipped,(void))

void GfxBytes_obj::writeRGB(int inVal){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_208_writeRGB)
HXLINE( 209)		this->buffer->writeByte(((inVal >> 16) & 255));
HXLINE( 210)		this->buffer->writeByte(((inVal >> 8) & 255));
HXLINE( 211)		this->buffer->writeByte((inVal & 255));
            	}


HX_DEFINE_DYNAMIC_FUNC1(GfxBytes_obj,writeRGB,(void))

int GfxBytes_obj::readRGB(){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_214_readRGB)
HXLINE( 215)		int r = this->buffer->readByte();
HXLINE( 216)		int g = this->buffer->readByte();
HXLINE( 217)		int b = this->buffer->readByte();
HXLINE( 218)		return (((r << 16) | (g << 8)) | b);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GfxBytes_obj,readRGB,return )

void GfxBytes_obj::beginGradientFill( ::format::gfx::Gradient grad){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_224_beginGradientFill)
HXLINE( 225)		this->buffer->writeByte(11);
HXLINE( 229)		this->buffer->writeByte(( (int)(grad->type) ));
HXLINE( 231)		this->buffer->writeByte(grad->colors->length);
HXLINE( 232)		{
HXLINE( 232)			int _g = 0;
HXDLIN( 232)			int _g1 = grad->colors->length;
HXDLIN( 232)			while((_g < _g1)){
HXLINE( 232)				_g = (_g + 1);
HXDLIN( 232)				int i = (_g - 1);
HXLINE( 234)				int _hx_int = grad->colors->__get(i);
HXDLIN( 234)				Float _hx_tmp;
HXDLIN( 234)				if ((_hx_int < 0)) {
HXLINE( 234)					_hx_tmp = (((Float)4294967296.0) + _hx_int);
            				}
            				else {
HXLINE( 234)					_hx_tmp = (_hx_int + ((Float)0.0));
            				}
HXDLIN( 234)				this->writeRGB(::Std_obj::_hx_int(_hx_tmp));
HXLINE( 235)				{
HXLINE( 235)					Float inVal = (grad->alphas->__get(i) * ((Float)255.0));
HXDLIN( 235)					{
HXLINE( 235)						 ::openfl::utils::ByteArrayData this1 = this->buffer;
HXDLIN( 235)						int value;
HXDLIN( 235)						if ((inVal < 0)) {
HXLINE( 235)							value = 0;
            						}
            						else {
HXLINE( 235)							if ((inVal > ((Float)255.0))) {
HXLINE( 235)								value = 255;
            							}
            							else {
HXLINE( 235)								value = ::Std_obj::_hx_int(inVal);
            							}
            						}
HXDLIN( 235)						this1->writeByte(value);
            					}
            				}
HXLINE( 236)				{
HXLINE( 236)					Float inVal1 = ( (Float)(grad->ratios->__get(i)) );
HXDLIN( 236)					{
HXLINE( 236)						 ::openfl::utils::ByteArrayData this2 = this->buffer;
HXDLIN( 236)						int value1;
HXDLIN( 236)						if ((inVal1 < 0)) {
HXLINE( 236)							value1 = 0;
            						}
            						else {
HXLINE( 236)							if ((inVal1 > ((Float)255.0))) {
HXLINE( 236)								value1 = 255;
            							}
            							else {
HXLINE( 236)								value1 = ::Std_obj::_hx_int(inVal1);
            							}
            						}
HXDLIN( 236)						this2->writeByte(value1);
            					}
            				}
            			}
            		}
HXLINE( 238)		this->buffer->writeFloat(grad->matrix->a);
HXLINE( 239)		this->buffer->writeFloat(grad->matrix->b);
HXLINE( 240)		this->buffer->writeFloat(grad->matrix->c);
HXLINE( 241)		this->buffer->writeFloat(grad->matrix->d);
HXLINE( 242)		this->buffer->writeFloat(grad->matrix->tx);
HXLINE( 243)		this->buffer->writeFloat(grad->matrix->ty);
HXLINE( 248)		this->buffer->writeByte(( (int)(grad->spread) ));
HXLINE( 249)		this->buffer->writeByte(( (int)(grad->interp) ));
HXLINE( 251)		this->buffer->writeFloat(grad->focus);
            	}


void GfxBytes_obj::beginFill(int color,Float alpha){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_255_beginFill)
HXLINE( 256)		this->buffer->writeByte(10);
HXLINE( 257)		this->writeRGB(color);
HXLINE( 258)		this->buffer->writeFloat(alpha);
            	}


void GfxBytes_obj::endFill(){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_262_endFill)
HXDLIN( 262)		this->buffer->writeByte(12);
            	}


void GfxBytes_obj::lineStyle( ::format::gfx::LineStyle style){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_266_lineStyle)
HXLINE( 267)		this->buffer->writeByte(20);
HXLINE( 268)		this->buffer->writeFloat(style->thickness);
HXLINE( 269)		this->writeRGB(style->color);
HXLINE( 270)		this->buffer->writeFloat(style->alpha);
HXLINE( 271)		{
HXLINE( 271)			int value;
HXDLIN( 271)			if (style->pixelHinting) {
HXLINE( 271)				value = 1;
            			}
            			else {
HXLINE( 271)				value = 0;
            			}
HXDLIN( 271)			this->buffer->writeByte(value);
            		}
HXLINE( 277)		this->buffer->writeByte(( (int)(style->scaleMode) ));
HXLINE( 278)		this->buffer->writeByte(( (int)(style->capsStyle) ));
HXLINE( 279)		this->buffer->writeByte(( (int)(style->jointStyle) ));
HXLINE( 281)		this->buffer->writeFloat(style->miterLimit);
            	}


void GfxBytes_obj::endLineStyle(){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_286_endLineStyle)
HXDLIN( 286)		this->buffer->writeByte(21);
            	}


void GfxBytes_obj::moveTo(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_290_moveTo)
HXLINE( 291)		this->buffer->writeByte(30);
HXLINE( 292)		this->buffer->writeFloat(inX);
HXLINE( 293)		this->buffer->writeFloat(inY);
            	}


void GfxBytes_obj::lineTo(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_297_lineTo)
HXLINE( 298)		this->buffer->writeByte(31);
HXLINE( 299)		this->buffer->writeFloat(inX);
HXLINE( 300)		this->buffer->writeFloat(inY);
            	}


void GfxBytes_obj::curveTo(Float inCX,Float inCY,Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_304_curveTo)
HXLINE( 305)		this->buffer->writeByte(32);
HXLINE( 306)		this->buffer->writeFloat(inCX);
HXLINE( 307)		this->buffer->writeFloat(inCY);
HXLINE( 308)		this->buffer->writeFloat(inX);
HXLINE( 309)		this->buffer->writeFloat(inY);
            	}


int GfxBytes_obj::_hx_EOF;

int GfxBytes_obj::SIZE;

int GfxBytes_obj::BEGIN_FILL;

int GfxBytes_obj::GRADIENT_FILL;

int GfxBytes_obj::END_FILL;

int GfxBytes_obj::LINE_STYLE;

int GfxBytes_obj::END_LINE_STYLE;

int GfxBytes_obj::MOVE;

int GfxBytes_obj::LINE;

int GfxBytes_obj::CURVE;

::String GfxBytes_obj::base64;

 ::haxe::crypto::BaseCode GfxBytes_obj::baseCoder;

 ::format::gfx::GfxBytes GfxBytes_obj::fromString(::String inString){
            	HX_GC_STACKFRAME(&_hx_pos_3f036dca2a1c940c_74_fromString)
HXLINE(  75)		if (::hx::IsNull( ::format::gfx::GfxBytes_obj::baseCoder )) {
HXLINE(  76)			::format::gfx::GfxBytes_obj::baseCoder =  ::haxe::crypto::BaseCode_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::ofString(::format::gfx::GfxBytes_obj::base64,null()));
            		}
HXLINE(  83)		 ::openfl::utils::ByteArrayData bytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::format::gfx::GfxBytes_obj::baseCoder->decodeBytes(::haxe::io::Bytes_obj::ofString(inString,null())));
HXLINE(  86)		{
HXLINE(  86)			 ::Dynamic algorithm = null();
HXDLIN(  86)			bytes->uncompress(algorithm);
            		}
HXLINE(  88)		return  ::format::gfx::GfxBytes_obj::__alloc( HX_CTX ,bytes,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GfxBytes_obj,fromString,return )

::Array< ::Dynamic> GfxBytes_obj::scaleModes;

::Array< ::Dynamic> GfxBytes_obj::capsStyles;

::Array< ::Dynamic> GfxBytes_obj::jointStyles;

::Array< ::Dynamic> GfxBytes_obj::spreadMethods;

::Array< ::Dynamic> GfxBytes_obj::interpolationMethods;


::hx::ObjectPtr< GfxBytes_obj > GfxBytes_obj::__new( ::openfl::utils::ByteArrayData inBuffer,::hx::Null< int >  __o_inFlags) {
	::hx::ObjectPtr< GfxBytes_obj > __this = new GfxBytes_obj();
	__this->__construct(inBuffer,__o_inFlags);
	return __this;
}

::hx::ObjectPtr< GfxBytes_obj > GfxBytes_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::utils::ByteArrayData inBuffer,::hx::Null< int >  __o_inFlags) {
	GfxBytes_obj *__this = (GfxBytes_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GfxBytes_obj), true, "format.gfx.GfxBytes"));
	*(void **)__this = GfxBytes_obj::_hx_vtable;
	__this->__construct(inBuffer,__o_inFlags);
	return __this;
}

GfxBytes_obj::GfxBytes_obj()
{
}

void GfxBytes_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GfxBytes);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_END_CLASS();
}

void GfxBytes_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
}

::hx::Val GfxBytes_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"eof") ) { return ::hx::Val( eof_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return ::hx::Val( buffer ); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return ::hx::Val( moveTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return ::hx::Val( lineTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iterate") ) { return ::hx::Val( iterate_dyn() ); }
		if (HX_FIELD_EQ(inName,"readRGB") ) { return ::hx::Val( readRGB_dyn() ); }
		if (HX_FIELD_EQ(inName,"endFill") ) { return ::hx::Val( endFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"curveTo") ) { return ::hx::Val( curveTo_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"writeRGB") ) { return ::hx::Val( writeRGB_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"beginFill") ) { return ::hx::Val( beginFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return ::hx::Val( lineStyle_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pushClipped") ) { return ::hx::Val( pushClipped_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endLineStyle") ) { return ::hx::Val( endLineStyle_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return ::hx::Val( beginGradientFill_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool GfxBytes_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"base64") ) { outValue = ( base64 ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"baseCoder") ) { outValue = ( baseCoder ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"scaleModes") ) { outValue = ( scaleModes ); return true; }
		if (HX_FIELD_EQ(inName,"capsStyles") ) { outValue = ( capsStyles ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"jointStyles") ) { outValue = ( jointStyles ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"spreadMethods") ) { outValue = ( spreadMethods ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"interpolationMethods") ) { outValue = ( interpolationMethods ); return true; }
	}
	return false;
}

::hx::Val GfxBytes_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool GfxBytes_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"base64") ) { base64=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"baseCoder") ) { baseCoder=ioValue.Cast<  ::haxe::crypto::BaseCode >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scaleModes") ) { scaleModes=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"capsStyles") ) { capsStyles=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"jointStyles") ) { jointStyles=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"spreadMethods") ) { spreadMethods=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"interpolationMethods") ) { interpolationMethods=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void GfxBytes_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buffer",00,bd,94,d0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GfxBytes_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::utils::ByteArrayData */ ,(int)offsetof(GfxBytes_obj,buffer),HX_("buffer",00,bd,94,d0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo GfxBytes_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &GfxBytes_obj::_hx_EOF,HX_("EOF",9c,a0,34,00)},
	{::hx::fsInt,(void *) &GfxBytes_obj::SIZE,HX_("SIZE",c1,68,14,37)},
	{::hx::fsInt,(void *) &GfxBytes_obj::BEGIN_FILL,HX_("BEGIN_FILL",b9,8f,44,38)},
	{::hx::fsInt,(void *) &GfxBytes_obj::GRADIENT_FILL,HX_("GRADIENT_FILL",72,e2,76,e8)},
	{::hx::fsInt,(void *) &GfxBytes_obj::END_FILL,HX_("END_FILL",c7,2c,f5,27)},
	{::hx::fsInt,(void *) &GfxBytes_obj::LINE_STYLE,HX_("LINE_STYLE",46,73,8d,dd)},
	{::hx::fsInt,(void *) &GfxBytes_obj::END_LINE_STYLE,HX_("END_LINE_STYLE",8a,14,4e,e0)},
	{::hx::fsInt,(void *) &GfxBytes_obj::MOVE,HX_("MOVE",11,ab,21,33)},
	{::hx::fsInt,(void *) &GfxBytes_obj::LINE,HX_("LINE",f4,df,73,32)},
	{::hx::fsInt,(void *) &GfxBytes_obj::CURVE,HX_("CURVE",8f,84,46,cc)},
	{::hx::fsString,(void *) &GfxBytes_obj::base64,HX_("base64",8f,fd,27,55)},
	{::hx::fsObject /*  ::haxe::crypto::BaseCode */ ,(void *) &GfxBytes_obj::baseCoder,HX_("baseCoder",d4,00,3b,5a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &GfxBytes_obj::scaleModes,HX_("scaleModes",c6,d0,8b,2d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &GfxBytes_obj::capsStyles,HX_("capsStyles",23,c5,e2,48)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &GfxBytes_obj::jointStyles,HX_("jointStyles",0c,a7,34,f7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &GfxBytes_obj::spreadMethods,HX_("spreadMethods",3f,f8,60,92)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &GfxBytes_obj::interpolationMethods,HX_("interpolationMethods",ae,b1,08,0d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GfxBytes_obj_sMemberFields[] = {
	HX_("buffer",00,bd,94,d0),
	HX_("toString",ac,d0,6e,38),
	HX_("eof",bc,04,4d,00),
	HX_("iterate",fa,79,d0,e2),
	HX_("size",c1,a0,53,4c),
	HX_("pushClipped",45,6d,61,12),
	HX_("writeRGB",6e,1f,f7,23),
	HX_("readRGB",57,65,d0,02),
	HX_("beginGradientFill",5c,3c,03,2e),
	HX_("beginFill",4c,ad,95,8c),
	HX_("endFill",fe,87,e0,25),
	HX_("lineStyle",9d,a8,18,cb),
	HX_("endLineStyle",42,b1,1a,da),
	HX_("moveTo",ec,d2,ac,cc),
	HX_("lineTo",8f,46,a0,ec),
	HX_("curveTo",0a,60,88,ce),
	::String(null()) };

static void GfxBytes_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GfxBytes_obj::_hx_EOF,"EOF");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::SIZE,"SIZE");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::BEGIN_FILL,"BEGIN_FILL");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::GRADIENT_FILL,"GRADIENT_FILL");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::END_FILL,"END_FILL");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::LINE_STYLE,"LINE_STYLE");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::END_LINE_STYLE,"END_LINE_STYLE");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::MOVE,"MOVE");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::LINE,"LINE");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::CURVE,"CURVE");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::base64,"base64");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::baseCoder,"baseCoder");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::scaleModes,"scaleModes");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::capsStyles,"capsStyles");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::jointStyles,"jointStyles");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::spreadMethods,"spreadMethods");
	HX_MARK_MEMBER_NAME(GfxBytes_obj::interpolationMethods,"interpolationMethods");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GfxBytes_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::_hx_EOF,"EOF");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::SIZE,"SIZE");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::BEGIN_FILL,"BEGIN_FILL");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::GRADIENT_FILL,"GRADIENT_FILL");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::END_FILL,"END_FILL");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::LINE_STYLE,"LINE_STYLE");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::END_LINE_STYLE,"END_LINE_STYLE");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::MOVE,"MOVE");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::LINE,"LINE");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::CURVE,"CURVE");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::base64,"base64");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::baseCoder,"baseCoder");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::scaleModes,"scaleModes");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::capsStyles,"capsStyles");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::jointStyles,"jointStyles");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::spreadMethods,"spreadMethods");
	HX_VISIT_MEMBER_NAME(GfxBytes_obj::interpolationMethods,"interpolationMethods");
};

#endif

::hx::Class GfxBytes_obj::__mClass;

static ::String GfxBytes_obj_sStaticFields[] = {
	HX_("EOF",9c,a0,34,00),
	HX_("SIZE",c1,68,14,37),
	HX_("BEGIN_FILL",b9,8f,44,38),
	HX_("GRADIENT_FILL",72,e2,76,e8),
	HX_("END_FILL",c7,2c,f5,27),
	HX_("LINE_STYLE",46,73,8d,dd),
	HX_("END_LINE_STYLE",8a,14,4e,e0),
	HX_("MOVE",11,ab,21,33),
	HX_("LINE",f4,df,73,32),
	HX_("CURVE",8f,84,46,cc),
	HX_("base64",8f,fd,27,55),
	HX_("baseCoder",d4,00,3b,5a),
	HX_("fromString",db,2d,74,54),
	HX_("scaleModes",c6,d0,8b,2d),
	HX_("capsStyles",23,c5,e2,48),
	HX_("jointStyles",0c,a7,34,f7),
	HX_("spreadMethods",3f,f8,60,92),
	HX_("interpolationMethods",ae,b1,08,0d),
	::String(null())
};

void GfxBytes_obj::__register()
{
	GfxBytes_obj _hx_dummy;
	GfxBytes_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.gfx.GfxBytes",7e,29,28,e0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GfxBytes_obj::__GetStatic;
	__mClass->mSetStaticField = &GfxBytes_obj::__SetStatic;
	__mClass->mMarkFunc = GfxBytes_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GfxBytes_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GfxBytes_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GfxBytes_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GfxBytes_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GfxBytes_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GfxBytes_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GfxBytes_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_24_boot)
HXDLIN(  24)		_hx_EOF = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_25_boot)
HXDLIN(  25)		SIZE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_27_boot)
HXDLIN(  27)		BEGIN_FILL = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_28_boot)
HXDLIN(  28)		GRADIENT_FILL = 11;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_29_boot)
HXDLIN(  29)		END_FILL = 12;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_31_boot)
HXDLIN(  31)		LINE_STYLE = 20;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_32_boot)
HXDLIN(  32)		END_LINE_STYLE = 21;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_34_boot)
HXDLIN(  34)		MOVE = 30;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_35_boot)
HXDLIN(  35)		LINE = 31;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_36_boot)
HXDLIN(  36)		CURVE = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_41_boot)
HXDLIN(  41)		base64 = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",03,41,03,7f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_93_boot)
HXDLIN(  93)		scaleModes = ::Array_obj< ::Dynamic>::__new(4)->init(0,2)->init(1,1)->init(2,3)->init(3,0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_94_boot)
HXDLIN(  94)		capsStyles = ::Array_obj< ::Dynamic>::__new(3)->init(0,1)->init(1,0)->init(2,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_95_boot)
HXDLIN(  95)		jointStyles = ::Array_obj< ::Dynamic>::__new(3)->init(0,2)->init(1,1)->init(2,0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_96_boot)
HXDLIN(  96)		spreadMethods = ::Array_obj< ::Dynamic>::__new(3)->init(0,0)->init(1,2)->init(2,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_3f036dca2a1c940c_97_boot)
HXDLIN(  97)		interpolationMethods = ::Array_obj< ::Dynamic>::__new(2)->init(0,1)->init(1,0);
            	}
}

} // end namespace format
} // end namespace gfx
