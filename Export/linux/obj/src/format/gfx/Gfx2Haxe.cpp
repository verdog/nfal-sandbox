// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_format_gfx_Gfx
#include <format/gfx/Gfx.h>
#endif
#ifndef INCLUDED_format_gfx_Gfx2Haxe
#include <format/gfx/Gfx2Haxe.h>
#endif
#ifndef INCLUDED_format_gfx_Gradient
#include <format/gfx/Gradient.h>
#endif
#ifndef INCLUDED_format_gfx_LineStyle
#include <format/gfx/LineStyle.h>
#endif
#ifndef INCLUDED_openfl_display__CapsStyle_CapsStyle_Impl_
#include <openfl/display/_CapsStyle/CapsStyle_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display__GradientType_GradientType_Impl_
#include <openfl/display/_GradientType/GradientType_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display__InterpolationMethod_InterpolationMethod_Impl_
#include <openfl/display/_InterpolationMethod/InterpolationMethod_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display__JointStyle_JointStyle_Impl_
#include <openfl/display/_JointStyle/JointStyle_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display__LineScaleMode_LineScaleMode_Impl_
#include <openfl/display/_LineScaleMode/LineScaleMode_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display__SpreadMethod_SpreadMethod_Impl_
#include <openfl/display/_SpreadMethod/SpreadMethod_Impl_.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_58a7a487522cd319_17_new,"format.gfx.Gfx2Haxe","new",0x7e7ee51d,"format.gfx.Gfx2Haxe.new","format/gfx/Gfx2Haxe.hx",17,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_23_f2a,"format.gfx.Gfx2Haxe","f2a",0x7e78a692,"format.gfx.Gfx2Haxe.f2a","format/gfx/Gfx2Haxe.hx",23,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_32_newMatrix,"format.gfx.Gfx2Haxe","newMatrix",0xca83c33e,"format.gfx.Gfx2Haxe.newMatrix","format/gfx/Gfx2Haxe.hx",32,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_38_beginGradientFill,"format.gfx.Gfx2Haxe","beginGradientFill",0xa7ae41d9,"format.gfx.Gfx2Haxe.beginGradientFill","format/gfx/Gfx2Haxe.hx",38,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_45_beginFill,"format.gfx.Gfx2Haxe","beginFill",0xdda06dc9,"format.gfx.Gfx2Haxe.beginFill","format/gfx/Gfx2Haxe.hx",45,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_47_endFill,"format.gfx.Gfx2Haxe","endFill",0x6be13f3b,"format.gfx.Gfx2Haxe.endFill","format/gfx/Gfx2Haxe.hx",47,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_52_lineStyle,"format.gfx.Gfx2Haxe","lineStyle",0x1c23691a,"format.gfx.Gfx2Haxe.lineStyle","format/gfx/Gfx2Haxe.hx",52,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_57_endLineStyle,"format.gfx.Gfx2Haxe","endLineStyle",0x86e79ce5,"format.gfx.Gfx2Haxe.endLineStyle","format/gfx/Gfx2Haxe.hx",57,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_60_moveTo,"format.gfx.Gfx2Haxe","moveTo",0xf093924f,"format.gfx.Gfx2Haxe.moveTo","format/gfx/Gfx2Haxe.hx",60,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_62_lineTo,"format.gfx.Gfx2Haxe","lineTo",0x108705f2,"format.gfx.Gfx2Haxe.lineTo","format/gfx/Gfx2Haxe.hx",62,0xe4c483b1)
HX_LOCAL_STACK_FRAME(_hx_pos_58a7a487522cd319_64_curveTo,"format.gfx.Gfx2Haxe","curveTo",0x14891747,"format.gfx.Gfx2Haxe.curveTo","format/gfx/Gfx2Haxe.hx",64,0xe4c483b1)
namespace format{
namespace gfx{

void Gfx2Haxe_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_17_new)
HXLINE(  18)		super::__construct();
HXLINE(  19)		this->commands = ::Array_obj< ::String >::__new(0);
            	}

Dynamic Gfx2Haxe_obj::__CreateEmpty() { return new Gfx2Haxe_obj; }

void *Gfx2Haxe_obj::_hx_vtable = 0;

Dynamic Gfx2Haxe_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Gfx2Haxe_obj > _hx_result = new Gfx2Haxe_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Gfx2Haxe_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x37a4283d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x37a4283d;
	} else {
		return inClassId==(int)0x79a02eff;
	}
}

::String Gfx2Haxe_obj::f2a(Float f){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_23_f2a)
HXLINE(  24)		if ((::Math_obj::abs(f) < ((Float)0.000001))) {
HXLINE(  24)			return HX_("0",30,00,00,00);
            		}
HXLINE(  25)		if ((::Math_obj::abs((( (Float)(1) ) - f)) < ((Float)0.000001))) {
HXLINE(  25)			return HX_("1",31,00,00,00);
            		}
HXLINE(  26)		return (f + HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Gfx2Haxe_obj,f2a,return )

::String Gfx2Haxe_obj::newMatrix( ::openfl::geom::Matrix m){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_32_newMatrix)
HXDLIN(  32)		::String _hx_tmp = ((HX_("new Matrix(",e7,de,31,d2) + this->f2a(m->a)) + HX_(",",2c,00,00,00));
HXDLIN(  32)		::String _hx_tmp1 = ((_hx_tmp + this->f2a(m->b)) + HX_(",",2c,00,00,00));
HXDLIN(  32)		::String _hx_tmp2 = ((_hx_tmp1 + this->f2a(m->c)) + HX_(",",2c,00,00,00));
HXDLIN(  32)		::String _hx_tmp3 = ((_hx_tmp2 + this->f2a(m->d)) + HX_(",",2c,00,00,00));
HXDLIN(  32)		::String _hx_tmp4 = ((_hx_tmp3 + this->f2a(m->tx)) + HX_(",",2c,00,00,00));
HXDLIN(  32)		return ((_hx_tmp4 + this->f2a(m->ty)) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Gfx2Haxe_obj,newMatrix,return )

void Gfx2Haxe_obj::beginGradientFill( ::format::gfx::Gradient grad){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_38_beginGradientFill)
HXDLIN(  38)		::Array< ::String > _hx_tmp = this->commands;
HXDLIN(  38)		::String _hx_tmp1;
HXDLIN(  38)		if (::hx::IsNull( grad->type )) {
HXDLIN(  38)			_hx_tmp1 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXDLIN(  38)			_hx_tmp1 = ::openfl::display::_GradientType::GradientType_Impl__obj::toString(grad->type);
            		}
HXDLIN(  38)		::String _hx_tmp2 = ((((HX_("g.beginGradientFill(",f3,73,a9,2f) + _hx_tmp1) + HX_(",",2c,00,00,00)) + ::Std_obj::string(grad->colors)) + HX_(",",2c,00,00,00));
HXDLIN(  38)		::String _hx_tmp3 = ((_hx_tmp2 + ::Std_obj::string(grad->alphas)) + HX_(",",2c,00,00,00));
HXDLIN(  38)		::String _hx_tmp4 = ((_hx_tmp3 + ::Std_obj::string(grad->ratios)) + HX_(",",2c,00,00,00));
HXDLIN(  38)		::String _hx_tmp5 = ((_hx_tmp4 + this->newMatrix(grad->matrix)) + HX_(",",2c,00,00,00));
HXLINE(  39)		::String _hx_tmp6;
HXDLIN(  39)		if (::hx::IsNull( grad->spread )) {
HXLINE(  39)			_hx_tmp6 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE(  39)			_hx_tmp6 = ::openfl::display::_SpreadMethod::SpreadMethod_Impl__obj::toString(grad->spread);
            		}
HXLINE(  40)		::String _hx_tmp7;
HXDLIN(  40)		if (::hx::IsNull( grad->interp )) {
HXLINE(  40)			_hx_tmp7 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE(  40)			_hx_tmp7 = ::openfl::display::_InterpolationMethod::InterpolationMethod_Impl__obj::toString(grad->interp);
            		}
HXLINE(  38)		_hx_tmp->push(((((((_hx_tmp5 + _hx_tmp6) + HX_(",",2c,00,00,00)) + _hx_tmp7) + HX_(",",2c,00,00,00)) + grad->focus) + HX_(");",f2,23,00,00)));
            	}


void Gfx2Haxe_obj::beginFill(int color,Float alpha){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_45_beginFill)
HXDLIN(  45)		::Array< ::String > _hx_tmp = this->commands;
HXDLIN(  45)		_hx_tmp->push(((((HX_("g.beginFill(",03,56,5e,12) + color) + HX_(",",2c,00,00,00)) + this->f2a(alpha)) + HX_(");",f2,23,00,00)));
            	}


void Gfx2Haxe_obj::endFill(){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_47_endFill)
HXDLIN(  47)		this->commands->push(HX_("g.endFill();",83,e9,ec,45));
            	}


void Gfx2Haxe_obj::lineStyle( ::format::gfx::LineStyle style){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_52_lineStyle)
HXDLIN(  52)		::Array< ::String > _hx_tmp = this->commands;
HXDLIN(  52)		::String _hx_tmp1 = ((HX_("g.lineStyle(",92,41,77,86) + this->f2a(style->thickness)) + HX_(",",2c,00,00,00));
HXDLIN(  52)		::String _hx_tmp2 = ((_hx_tmp1 + style->color) + HX_(",",2c,00,00,00));
HXDLIN(  52)		::String _hx_tmp3 = ((_hx_tmp2 + this->f2a(style->alpha)) + HX_(",",2c,00,00,00));
HXDLIN(  52)		::String _hx_tmp4 = ((_hx_tmp3 + ::Std_obj::string(style->pixelHinting)) + HX_(",",2c,00,00,00));
HXLINE(  53)		::String _hx_tmp5;
HXDLIN(  53)		if (::hx::IsNull( style->scaleMode )) {
HXLINE(  53)			_hx_tmp5 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE(  53)			_hx_tmp5 = ::openfl::display::_LineScaleMode::LineScaleMode_Impl__obj::toString(style->scaleMode);
            		}
HXDLIN(  53)		::String _hx_tmp6;
HXDLIN(  53)		if (::hx::IsNull( style->capsStyle )) {
HXLINE(  53)			_hx_tmp6 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE(  53)			_hx_tmp6 = ::openfl::display::_CapsStyle::CapsStyle_Impl__obj::toString(style->capsStyle);
            		}
HXDLIN(  53)		::String _hx_tmp7;
HXDLIN(  53)		if (::hx::IsNull( style->jointStyle )) {
HXLINE(  53)			_hx_tmp7 = HX_("null",87,9e,0e,49);
            		}
            		else {
HXLINE(  53)			_hx_tmp7 = ::openfl::display::_JointStyle::JointStyle_Impl__obj::toString(style->jointStyle);
            		}
HXLINE(  52)		_hx_tmp->push(((((((((_hx_tmp4 + _hx_tmp5) + HX_(",",2c,00,00,00)) + _hx_tmp6) + HX_(",",2c,00,00,00)) + _hx_tmp7) + HX_(",",2c,00,00,00)) + this->f2a(style->miterLimit)) + HX_(");",f2,23,00,00)));
            	}


void Gfx2Haxe_obj::endLineStyle(){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_57_endLineStyle)
HXDLIN(  57)		this->commands->push(HX_("g.lineStyle();",04,6e,f8,83));
            	}


void Gfx2Haxe_obj::moveTo(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_60_moveTo)
HXDLIN(  60)		this->commands->push(((((HX_("g.moveTo(",b5,7c,bd,70) + inX) + HX_(",",2c,00,00,00)) + inY) + HX_(");",f2,23,00,00)));
            	}


void Gfx2Haxe_obj::lineTo(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_62_lineTo)
HXDLIN(  62)		this->commands->push(((((HX_("g.lineTo(",b2,37,cf,45) + inX) + HX_(",",2c,00,00,00)) + inY) + HX_(");",f2,23,00,00)));
            	}


void Gfx2Haxe_obj::curveTo(Float inCX,Float inCY,Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_58a7a487522cd319_64_curveTo)
HXDLIN(  64)		this->commands->push(((((((((HX_("g.curveTo(",c5,c1,22,2e) + inCX) + HX_(",",2c,00,00,00)) + inCY) + HX_(",",2c,00,00,00)) + inX) + HX_(",",2c,00,00,00)) + inY) + HX_(");",f2,23,00,00)));
            	}



::hx::ObjectPtr< Gfx2Haxe_obj > Gfx2Haxe_obj::__new() {
	::hx::ObjectPtr< Gfx2Haxe_obj > __this = new Gfx2Haxe_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Gfx2Haxe_obj > Gfx2Haxe_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Gfx2Haxe_obj *__this = (Gfx2Haxe_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Gfx2Haxe_obj), true, "format.gfx.Gfx2Haxe"));
	*(void **)__this = Gfx2Haxe_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Gfx2Haxe_obj::Gfx2Haxe_obj()
{
}

void Gfx2Haxe_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Gfx2Haxe);
	HX_MARK_MEMBER_NAME(commands,"commands");
	HX_MARK_END_CLASS();
}

void Gfx2Haxe_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(commands,"commands");
}

::hx::Val Gfx2Haxe_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"f2a") ) { return ::hx::Val( f2a_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"moveTo") ) { return ::hx::Val( moveTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return ::hx::Val( lineTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endFill") ) { return ::hx::Val( endFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"curveTo") ) { return ::hx::Val( curveTo_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"commands") ) { return ::hx::Val( commands ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"newMatrix") ) { return ::hx::Val( newMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"beginFill") ) { return ::hx::Val( beginFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return ::hx::Val( lineStyle_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endLineStyle") ) { return ::hx::Val( endLineStyle_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return ::hx::Val( beginGradientFill_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Gfx2Haxe_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"commands") ) { commands=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Gfx2Haxe_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("commands",c8,b0,55,be));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Gfx2Haxe_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Gfx2Haxe_obj,commands),HX_("commands",c8,b0,55,be)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Gfx2Haxe_obj_sStaticStorageInfo = 0;
#endif

static ::String Gfx2Haxe_obj_sMemberFields[] = {
	HX_("commands",c8,b0,55,be),
	HX_("f2a",d5,91,4d,00),
	HX_("newMatrix",c1,02,79,79),
	HX_("beginGradientFill",5c,3c,03,2e),
	HX_("beginFill",4c,ad,95,8c),
	HX_("endFill",fe,87,e0,25),
	HX_("lineStyle",9d,a8,18,cb),
	HX_("endLineStyle",42,b1,1a,da),
	HX_("moveTo",ec,d2,ac,cc),
	HX_("lineTo",8f,46,a0,ec),
	HX_("curveTo",0a,60,88,ce),
	::String(null()) };

::hx::Class Gfx2Haxe_obj::__mClass;

void Gfx2Haxe_obj::__register()
{
	Gfx2Haxe_obj _hx_dummy;
	Gfx2Haxe_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.gfx.Gfx2Haxe",ab,12,4d,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Gfx2Haxe_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Gfx2Haxe_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Gfx2Haxe_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Gfx2Haxe_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace gfx
