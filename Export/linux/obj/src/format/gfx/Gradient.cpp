// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_format_gfx_Gradient
#include <format/gfx/Gradient.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81ace526f46aa7bd_14_new,"format.gfx.Gradient","new",0x1ea9522e,"format.gfx.Gradient.new","format/gfx/Gradient.hx",14,0x5e0623c0)
namespace format{
namespace gfx{

void Gradient_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_81ace526f46aa7bd_14_new)
HXLINE(  15)		this->type = 0;
HXLINE(  16)		this->colors = ::Array_obj< int >::__new(0);
HXLINE(  17)		this->alphas = ::Array_obj< Float >::__new(0);
HXLINE(  18)		this->ratios = ::Array_obj< int >::__new(0);
HXLINE(  19)		this->matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  20)		this->spread = 0;
HXLINE(  21)		this->interp = 1;
HXLINE(  22)		this->focus = ((Float)0.0);
            	}

Dynamic Gradient_obj::__CreateEmpty() { return new Gradient_obj; }

void *Gradient_obj::_hx_vtable = 0;

Dynamic Gradient_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Gradient_obj > _hx_result = new Gradient_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Gradient_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x201404ea;
}


::hx::ObjectPtr< Gradient_obj > Gradient_obj::__new() {
	::hx::ObjectPtr< Gradient_obj > __this = new Gradient_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Gradient_obj > Gradient_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Gradient_obj *__this = (Gradient_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Gradient_obj), true, "format.gfx.Gradient"));
	*(void **)__this = Gradient_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Gradient_obj::Gradient_obj()
{
}

void Gradient_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Gradient);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(colors,"colors");
	HX_MARK_MEMBER_NAME(alphas,"alphas");
	HX_MARK_MEMBER_NAME(ratios,"ratios");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(spread,"spread");
	HX_MARK_MEMBER_NAME(interp,"interp");
	HX_MARK_MEMBER_NAME(focus,"focus");
	HX_MARK_END_CLASS();
}

void Gradient_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(colors,"colors");
	HX_VISIT_MEMBER_NAME(alphas,"alphas");
	HX_VISIT_MEMBER_NAME(ratios,"ratios");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(spread,"spread");
	HX_VISIT_MEMBER_NAME(interp,"interp");
	HX_VISIT_MEMBER_NAME(focus,"focus");
}

::hx::Val Gradient_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { return ::hx::Val( focus ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colors") ) { return ::hx::Val( colors ); }
		if (HX_FIELD_EQ(inName,"alphas") ) { return ::hx::Val( alphas ); }
		if (HX_FIELD_EQ(inName,"ratios") ) { return ::hx::Val( ratios ); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return ::hx::Val( matrix ); }
		if (HX_FIELD_EQ(inName,"spread") ) { return ::hx::Val( spread ); }
		if (HX_FIELD_EQ(inName,"interp") ) { return ::hx::Val( interp ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Gradient_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"focus") ) { focus=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colors") ) { colors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alphas") ) { alphas=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratios") ) { ratios=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spread") ) { spread=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interp") ) { interp=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Gradient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("colors",b0,c5,86,c6));
	outFields->push(HX_("alphas",55,cb,3b,42));
	outFields->push(HX_("ratios",08,35,8a,bb));
	outFields->push(HX_("matrix",41,36,c8,bb));
	outFields->push(HX_("spread",73,c2,92,c3));
	outFields->push(HX_("interp",d4,79,86,9e));
	outFields->push(HX_("focus",d8,5f,89,04));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Gradient_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Gradient_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Gradient_obj,colors),HX_("colors",b0,c5,86,c6)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Gradient_obj,alphas),HX_("alphas",55,cb,3b,42)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Gradient_obj,ratios),HX_("ratios",08,35,8a,bb)},
	{::hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(Gradient_obj,matrix),HX_("matrix",41,36,c8,bb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Gradient_obj,spread),HX_("spread",73,c2,92,c3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Gradient_obj,interp),HX_("interp",d4,79,86,9e)},
	{::hx::fsFloat,(int)offsetof(Gradient_obj,focus),HX_("focus",d8,5f,89,04)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Gradient_obj_sStaticStorageInfo = 0;
#endif

static ::String Gradient_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("colors",b0,c5,86,c6),
	HX_("alphas",55,cb,3b,42),
	HX_("ratios",08,35,8a,bb),
	HX_("matrix",41,36,c8,bb),
	HX_("spread",73,c2,92,c3),
	HX_("interp",d4,79,86,9e),
	HX_("focus",d8,5f,89,04),
	::String(null()) };

::hx::Class Gradient_obj::__mClass;

void Gradient_obj::__register()
{
	Gradient_obj _hx_dummy;
	Gradient_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.gfx.Gradient",3c,63,f5,29);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Gradient_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Gradient_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Gradient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Gradient_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace gfx
