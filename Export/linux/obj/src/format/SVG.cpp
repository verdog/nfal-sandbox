// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_format_SVG
#include <format/SVG.h>
#endif
#ifndef INCLUDED_format_svg_Group
#include <format/svg/Group.h>
#endif
#ifndef INCLUDED_format_svg_SVGData
#include <format/svg/SVGData.h>
#endif
#ifndef INCLUDED_format_svg_SVGRenderer
#include <format/svg/SVGRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7d894360943d0da1_19_new,"format.SVG","new",0x8c78f8ff,"format.SVG.new","format/SVG.hx",19,0xed5ee212)
HX_LOCAL_STACK_FRAME(_hx_pos_7d894360943d0da1_28_render,"format.SVG","render",0xb7c63017,"format.SVG.render","format/SVG.hx",28,0xed5ee212)
namespace format{

void SVG_obj::__construct(::String content){
            	HX_GC_STACKFRAME(&_hx_pos_7d894360943d0da1_19_new)
HXDLIN(  19)		if (::hx::IsNotNull( content )) {
HXLINE(  21)			this->data =  ::format::svg::SVGData_obj::__alloc( HX_CTX ,::Xml_obj::parse(content),null());
            		}
            	}

Dynamic SVG_obj::__CreateEmpty() { return new SVG_obj; }

void *SVG_obj::_hx_vtable = 0;

Dynamic SVG_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SVG_obj > _hx_result = new SVG_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SVG_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x64ba7a2d;
}

void SVG_obj::render( ::openfl::display::Graphics graphics,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_width,::hx::Null< int >  __o_height,::String inLayer){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		int width = __o_width.Default(-1);
            		int height = __o_height.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_7d894360943d0da1_28_render)
HXLINE(  30)		if (::hx::IsNull( this->data )) {
HXLINE(  30)			return;
            		}
HXLINE(  32)		 ::openfl::geom::Matrix matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  33)		matrix->identity();
HXLINE(  35)		bool _hx_tmp;
HXDLIN(  35)		if ((width > -1)) {
HXLINE(  35)			_hx_tmp = (height > -1);
            		}
            		else {
HXLINE(  35)			_hx_tmp = false;
            		}
HXDLIN(  35)		if (_hx_tmp) {
HXLINE(  37)			matrix->scale((( (Float)(width) ) / this->data->width),(( (Float)(height) ) / this->data->height));
            		}
HXLINE(  41)		matrix->translate(x,y);
HXLINE(  43)		 ::format::svg::SVGRenderer renderer =  ::format::svg::SVGRenderer_obj::__alloc( HX_CTX ,this->data,inLayer);
HXLINE(  45)		renderer->render(graphics,matrix,null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC6(SVG_obj,render,(void))


::hx::ObjectPtr< SVG_obj > SVG_obj::__new(::String content) {
	::hx::ObjectPtr< SVG_obj > __this = new SVG_obj();
	__this->__construct(content);
	return __this;
}

::hx::ObjectPtr< SVG_obj > SVG_obj::__alloc(::hx::Ctx *_hx_ctx,::String content) {
	SVG_obj *__this = (SVG_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SVG_obj), true, "format.SVG"));
	*(void **)__this = SVG_obj::_hx_vtable;
	__this->__construct(content);
	return __this;
}

SVG_obj::SVG_obj()
{
}

void SVG_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SVG);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_END_CLASS();
}

void SVG_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
}

::hx::Val SVG_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SVG_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::format::svg::SVGData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SVG_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SVG_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::format::svg::SVGData */ ,(int)offsetof(SVG_obj,data),HX_("data",2a,56,63,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SVG_obj_sStaticStorageInfo = 0;
#endif

static ::String SVG_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class SVG_obj::__mClass;

void SVG_obj::__register()
{
	SVG_obj _hx_dummy;
	SVG_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.SVG",8d,0d,33,f3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SVG_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SVG_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SVG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SVG_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
