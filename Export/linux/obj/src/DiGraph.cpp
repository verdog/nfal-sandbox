// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_DiGraph
#include <DiGraph.h>
#endif
#ifndef INCLUDED_GraphEdge
#include <GraphEdge.h>
#endif
#ifndef INCLUDED_GraphVertex
#include <GraphVertex.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_439a5906e59aa37f_5_new,"DiGraph","new",0x9d0cf6db,"DiGraph.new","DiGraph.hx",5,0x84b8dcf5)
HX_LOCAL_STACK_FRAME(_hx_pos_439a5906e59aa37f_11_addVertex,"DiGraph","addVertex",0xf155c520,"DiGraph.addVertex","DiGraph.hx",11,0x84b8dcf5)
HX_LOCAL_STACK_FRAME(_hx_pos_439a5906e59aa37f_16_connectVertices,"DiGraph","connectVertices",0xb17b24fe,"DiGraph.connectVertices","DiGraph.hx",16,0x84b8dcf5)

void DiGraph_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_439a5906e59aa37f_5_new)
HXLINE(   6)		this->vertices =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(   7)		this->edges =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}

Dynamic DiGraph_obj::__CreateEmpty() { return new DiGraph_obj; }

void *DiGraph_obj::_hx_vtable = 0;

Dynamic DiGraph_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiGraph_obj > _hx_result = new DiGraph_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DiGraph_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x117a65c5;
}

void DiGraph_obj::addVertex(){
            	HX_GC_STACKFRAME(&_hx_pos_439a5906e59aa37f_11_addVertex)
HXLINE(  12)		 ::GraphVertex node =  ::GraphVertex_obj::__alloc( HX_CTX );
HXLINE(  13)		this->vertices->set(node->id,node);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiGraph_obj,addVertex,(void))

void DiGraph_obj::connectVertices( ::GraphVertex source, ::GraphVertex sink){
            	HX_GC_STACKFRAME(&_hx_pos_439a5906e59aa37f_16_connectVertices)
HXLINE(  17)		 ::GraphEdge edge =  ::GraphEdge_obj::__alloc( HX_CTX ,source,sink);
HXLINE(  18)		this->edges->set(edge->id,edge);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DiGraph_obj,connectVertices,(void))


::hx::ObjectPtr< DiGraph_obj > DiGraph_obj::__new() {
	::hx::ObjectPtr< DiGraph_obj > __this = new DiGraph_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DiGraph_obj > DiGraph_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DiGraph_obj *__this = (DiGraph_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiGraph_obj), true, "DiGraph"));
	*(void **)__this = DiGraph_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DiGraph_obj::DiGraph_obj()
{
}

void DiGraph_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DiGraph);
	HX_MARK_MEMBER_NAME(vertices,"vertices");
	HX_MARK_MEMBER_NAME(edges,"edges");
	HX_MARK_END_CLASS();
}

void DiGraph_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vertices,"vertices");
	HX_VISIT_MEMBER_NAME(edges,"edges");
}

::hx::Val DiGraph_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"edges") ) { return ::hx::Val( edges ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { return ::hx::Val( vertices ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addVertex") ) { return ::hx::Val( addVertex_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"connectVertices") ) { return ::hx::Val( connectVertices_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DiGraph_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"edges") ) { edges=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { vertices=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DiGraph_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("vertices",f9,bf,15,6a));
	outFields->push(HX_("edges",96,6d,e0,69));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DiGraph_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(DiGraph_obj,vertices),HX_("vertices",f9,bf,15,6a)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(DiGraph_obj,edges),HX_("edges",96,6d,e0,69)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DiGraph_obj_sStaticStorageInfo = 0;
#endif

static ::String DiGraph_obj_sMemberFields[] = {
	HX_("vertices",f9,bf,15,6a),
	HX_("edges",96,6d,e0,69),
	HX_("addVertex",65,10,6c,59),
	HX_("connectVertices",03,b2,24,4d),
	::String(null()) };

::hx::Class DiGraph_obj::__mClass;

void DiGraph_obj::__register()
{
	DiGraph_obj _hx_dummy;
	DiGraph_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DiGraph",69,ed,43,34);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DiGraph_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DiGraph_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiGraph_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiGraph_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

