// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_GraphEdge
#include <GraphEdge.h>
#endif
#ifndef INCLUDED_GraphVertex
#include <GraphVertex.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a546a95b9cf05777_1_new,"GraphEdge","new",0x6480e4fd,"GraphEdge.new","GraphEdge.hx",1,0xc39b8913)

void GraphEdge_obj::__construct( ::GraphVertex source, ::GraphVertex sink){
            	HX_STACKFRAME(&_hx_pos_a546a95b9cf05777_1_new)
HXLINE(   4)		this->nextId = 0;
HXLINE(   8)		this->source = source;
HXLINE(   9)		this->sink = sink;
HXLINE(  11)		this->id = this->nextId++;
HXLINE(  12)		::haxe::Log_obj::trace((HX_("created an edge with id ",d3,bb,5a,81) + this->id),::hx::SourceInfo(HX_("Source/GraphEdge.hx",e7,ad,16,27),12,HX_("GraphEdge",8b,a2,99,92),HX_("new",60,d0,53,00)));
            	}

Dynamic GraphEdge_obj::__CreateEmpty() { return new GraphEdge_obj; }

void *GraphEdge_obj::_hx_vtable = 0;

Dynamic GraphEdge_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GraphEdge_obj > _hx_result = new GraphEdge_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool GraphEdge_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55dd17cb;
}


::hx::ObjectPtr< GraphEdge_obj > GraphEdge_obj::__new( ::GraphVertex source, ::GraphVertex sink) {
	::hx::ObjectPtr< GraphEdge_obj > __this = new GraphEdge_obj();
	__this->__construct(source,sink);
	return __this;
}

::hx::ObjectPtr< GraphEdge_obj > GraphEdge_obj::__alloc(::hx::Ctx *_hx_ctx, ::GraphVertex source, ::GraphVertex sink) {
	GraphEdge_obj *__this = (GraphEdge_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GraphEdge_obj), true, "GraphEdge"));
	*(void **)__this = GraphEdge_obj::_hx_vtable;
	__this->__construct(source,sink);
	return __this;
}

GraphEdge_obj::GraphEdge_obj()
{
}

void GraphEdge_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GraphEdge);
	HX_MARK_MEMBER_NAME(source,"source");
	HX_MARK_MEMBER_NAME(sink,"sink");
	HX_MARK_MEMBER_NAME(nextId,"nextId");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_END_CLASS();
}

void GraphEdge_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(source,"source");
	HX_VISIT_MEMBER_NAME(sink,"sink");
	HX_VISIT_MEMBER_NAME(nextId,"nextId");
	HX_VISIT_MEMBER_NAME(id,"id");
}

::hx::Val GraphEdge_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sink") ) { return ::hx::Val( sink ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { return ::hx::Val( source ); }
		if (HX_FIELD_EQ(inName,"nextId") ) { return ::hx::Val( nextId ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GraphEdge_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"sink") ) { sink=inValue.Cast<  ::GraphVertex >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"source") ) { source=inValue.Cast<  ::GraphVertex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextId") ) { nextId=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GraphEdge_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("source",db,b0,31,32));
	outFields->push(HX_("sink",53,96,53,4c));
	outFields->push(HX_("nextId",ae,27,64,72));
	outFields->push(HX_("id",db,5b,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GraphEdge_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::GraphVertex */ ,(int)offsetof(GraphEdge_obj,source),HX_("source",db,b0,31,32)},
	{::hx::fsObject /*  ::GraphVertex */ ,(int)offsetof(GraphEdge_obj,sink),HX_("sink",53,96,53,4c)},
	{::hx::fsInt,(int)offsetof(GraphEdge_obj,nextId),HX_("nextId",ae,27,64,72)},
	{::hx::fsInt,(int)offsetof(GraphEdge_obj,id),HX_("id",db,5b,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GraphEdge_obj_sStaticStorageInfo = 0;
#endif

static ::String GraphEdge_obj_sMemberFields[] = {
	HX_("source",db,b0,31,32),
	HX_("sink",53,96,53,4c),
	HX_("nextId",ae,27,64,72),
	HX_("id",db,5b,00,00),
	::String(null()) };

::hx::Class GraphEdge_obj::__mClass;

void GraphEdge_obj::__register()
{
	GraphEdge_obj _hx_dummy;
	GraphEdge_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("GraphEdge",8b,a2,99,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GraphEdge_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GraphEdge_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GraphEdge_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GraphEdge_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

