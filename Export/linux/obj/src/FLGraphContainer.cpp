// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_DiGraph
#include <DiGraph.h>
#endif
#ifndef INCLUDED_FLGraphContainer
#include <FLGraphContainer.h>
#endif
#ifndef INCLUDED_GraphVertex
#include <GraphVertex.h>
#endif
#ifndef INCLUDED_format_SVG
#include <format/SVG.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_70abad7a3b4a03af_8_new,"FLGraphContainer","new",0x51fabd6b,"FLGraphContainer.new","FLGraphContainer.hx",8,0x453f1865)
HX_LOCAL_STACK_FRAME(_hx_pos_70abad7a3b4a03af_15_display,"FLGraphContainer","display",0x24d3f8cd,"FLGraphContainer.display","FLGraphContainer.hx",15,0x453f1865)

void FLGraphContainer_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_70abad7a3b4a03af_8_new)
HXLINE(   9)		super::__construct();
HXLINE(  10)		::haxe::Log_obj::trace(HX_("Creating new FLGraph",21,f1,69,98),::hx::SourceInfo(HX_("Source/FLGraphContainer.hx",11,f6,f6,8c),10,HX_("FLGraphContainer",f9,2b,07,8a),HX_("new",60,d0,53,00)));
HXLINE(  12)		this->digraph =  ::DiGraph_obj::__alloc( HX_CTX );
            	}

Dynamic FLGraphContainer_obj::__CreateEmpty() { return new FLGraphContainer_obj; }

void *FLGraphContainer_obj::_hx_vtable = 0;

Dynamic FLGraphContainer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FLGraphContainer_obj > _hx_result = new FLGraphContainer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FLGraphContainer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x5fe8deb9) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x5fe8deb9;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void FLGraphContainer_obj::display(){
            	HX_GC_STACKFRAME(&_hx_pos_70abad7a3b4a03af_15_display)
HXLINE(  16)		this->removeChildren(null(),null());
HXLINE(  18)		 ::format::SVG svg =  ::format::SVG_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getText(HX_("assets/circle.svg",52,b6,53,85)));
HXLINE(  20)		int i = 10;
HXLINE(  21)		{
HXLINE(  21)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,this->digraph->vertices);
HXDLIN(  21)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  21)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(  21)				int id = ( (int)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(  21)				 ::GraphVertex vert = ( ( ::GraphVertex)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN(  21)				{
HXLINE(  22)					 ::openfl::display::Sprite node =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  23)					node->set_x(( (Float)(i) ));
HXLINE(  24)					i = (i + 20);
HXLINE(  25)					node->set_y(( (Float)(40) ));
HXLINE(  26)					svg->render(node->get_graphics(),null(),null(),null(),null(),null());
HXLINE(  27)					this->addChild(node);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FLGraphContainer_obj,display,(void))


::hx::ObjectPtr< FLGraphContainer_obj > FLGraphContainer_obj::__new() {
	::hx::ObjectPtr< FLGraphContainer_obj > __this = new FLGraphContainer_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FLGraphContainer_obj > FLGraphContainer_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FLGraphContainer_obj *__this = (FLGraphContainer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FLGraphContainer_obj), true, "FLGraphContainer"));
	*(void **)__this = FLGraphContainer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FLGraphContainer_obj::FLGraphContainer_obj()
{
}

void FLGraphContainer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FLGraphContainer);
	HX_MARK_MEMBER_NAME(digraph,"digraph");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FLGraphContainer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(digraph,"digraph");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FLGraphContainer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"digraph") ) { return ::hx::Val( digraph ); }
		if (HX_FIELD_EQ(inName,"display") ) { return ::hx::Val( display_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FLGraphContainer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"digraph") ) { digraph=inValue.Cast<  ::DiGraph >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FLGraphContainer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("digraph",a9,55,c5,d3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FLGraphContainer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::DiGraph */ ,(int)offsetof(FLGraphContainer_obj,digraph),HX_("digraph",a9,55,c5,d3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FLGraphContainer_obj_sStaticStorageInfo = 0;
#endif

static ::String FLGraphContainer_obj_sMemberFields[] = {
	HX_("digraph",a9,55,c5,d3),
	HX_("display",42,2a,4a,bb),
	::String(null()) };

::hx::Class FLGraphContainer_obj::__mClass;

void FLGraphContainer_obj::__register()
{
	FLGraphContainer_obj _hx_dummy;
	FLGraphContainer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FLGraphContainer",f9,2b,07,8a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FLGraphContainer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FLGraphContainer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FLGraphContainer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FLGraphContainer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

