// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_GraphVertex
#include <GraphVertex.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0d7c113241e2a71b_5_new,"GraphVertex","new",0x4a538724,"GraphVertex.new","GraphVertex.hx",5,0x41c4a8cc)
HX_LOCAL_STACK_FRAME(_hx_pos_0d7c113241e2a71b_2_boot,"GraphVertex","boot",0xb6dbb8ee,"GraphVertex.boot","GraphVertex.hx",2,0x41c4a8cc)

void GraphVertex_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0d7c113241e2a71b_5_new)
HXLINE(   6)		this->id = ::GraphVertex_obj::nextId++;
HXLINE(   8)		::haxe::Log_obj::trace((HX_("Created new vertex with id ",ef,3a,8f,2d) + this->id),::hx::SourceInfo(HX_("Source/GraphVertex.hx",a0,aa,f1,d5),8,HX_("GraphVertex",32,65,f8,0c),HX_("new",60,d0,53,00)));
            	}

Dynamic GraphVertex_obj::__CreateEmpty() { return new GraphVertex_obj; }

void *GraphVertex_obj::_hx_vtable = 0;

Dynamic GraphVertex_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GraphVertex_obj > _hx_result = new GraphVertex_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GraphVertex_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x062f111a;
}

int GraphVertex_obj::nextId;


::hx::ObjectPtr< GraphVertex_obj > GraphVertex_obj::__new() {
	::hx::ObjectPtr< GraphVertex_obj > __this = new GraphVertex_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< GraphVertex_obj > GraphVertex_obj::__alloc(::hx::Ctx *_hx_ctx) {
	GraphVertex_obj *__this = (GraphVertex_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GraphVertex_obj), false, "GraphVertex"));
	*(void **)__this = GraphVertex_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GraphVertex_obj::GraphVertex_obj()
{
}

::hx::Val GraphVertex_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
	}
	return super::__Field(inName,inCallProp);
}

bool GraphVertex_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"nextId") ) { outValue = ( nextId ); return true; }
	}
	return false;
}

::hx::Val GraphVertex_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool GraphVertex_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"nextId") ) { nextId=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void GraphVertex_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GraphVertex_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(GraphVertex_obj,id),HX_("id",db,5b,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo GraphVertex_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &GraphVertex_obj::nextId,HX_("nextId",ae,27,64,72)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GraphVertex_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	::String(null()) };

static void GraphVertex_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GraphVertex_obj::nextId,"nextId");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GraphVertex_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GraphVertex_obj::nextId,"nextId");
};

#endif

::hx::Class GraphVertex_obj::__mClass;

static ::String GraphVertex_obj_sStaticFields[] = {
	HX_("nextId",ae,27,64,72),
	::String(null())
};

void GraphVertex_obj::__register()
{
	GraphVertex_obj _hx_dummy;
	GraphVertex_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("GraphVertex",32,65,f8,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GraphVertex_obj::__GetStatic;
	__mClass->mSetStaticField = &GraphVertex_obj::__SetStatic;
	__mClass->mMarkFunc = GraphVertex_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GraphVertex_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GraphVertex_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GraphVertex_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GraphVertex_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GraphVertex_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GraphVertex_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GraphVertex_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0d7c113241e2a71b_2_boot)
HXDLIN(   2)		nextId = 0;
            	}
}

