// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_svg_ArcSegment
#define INCLUDED_format_svg_ArcSegment

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_format_svg_PathSegment
#include <format/svg/PathSegment.h>
#endif
HX_DECLARE_CLASS2(format,gfx,Gfx)
HX_DECLARE_CLASS2(format,svg,ArcSegment)
HX_DECLARE_CLASS2(format,svg,PathSegment)
HX_DECLARE_CLASS2(format,svg,RenderContext)

namespace format{
namespace svg{


class HXCPP_CLASS_ATTRIBUTES ArcSegment_obj : public  ::format::svg::PathSegment_obj
{
	public:
		typedef  ::format::svg::PathSegment_obj super;
		typedef ArcSegment_obj OBJ_;
		ArcSegment_obj();

	public:
		enum { _hx_ClassId = 0x1e33d74a };

		void __construct(Float inX1,Float inY1,Float inRX,Float inRY,Float inRotation,bool inLargeArc,bool inSweep,Float x,Float y);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="format.svg.ArcSegment")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"format.svg.ArcSegment"); }
		static ::hx::ObjectPtr< ArcSegment_obj > __new(Float inX1,Float inY1,Float inRX,Float inRY,Float inRotation,bool inLargeArc,bool inSweep,Float x,Float y);
		static ::hx::ObjectPtr< ArcSegment_obj > __alloc(::hx::Ctx *_hx_ctx,Float inX1,Float inY1,Float inRX,Float inRY,Float inRotation,bool inLargeArc,bool inSweep,Float x,Float y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ArcSegment_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ArcSegment",a1,4b,0b,55); }

		Float x1;
		Float y1;
		Float rx;
		Float ry;
		Float phi;
		bool fA;
		bool fS;
		void toGfx( ::format::gfx::Gfx inGfx, ::format::svg::RenderContext ioContext);

		int getType();

};

} // end namespace format
} // end namespace svg

#endif /* INCLUDED_format_svg_ArcSegment */ 
