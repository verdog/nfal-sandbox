// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_svg_Grad
#define INCLUDED_format_svg_Grad

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_format_gfx_Gradient
#include <format/gfx/Gradient.h>
#endif
HX_DECLARE_CLASS2(format,gfx,Gradient)
HX_DECLARE_CLASS2(format,svg,Grad)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace format{
namespace svg{


class HXCPP_CLASS_ATTRIBUTES Grad_obj : public  ::format::gfx::Gradient_obj
{
	public:
		typedef  ::format::gfx::Gradient_obj super;
		typedef Grad_obj OBJ_;
		Grad_obj();

	public:
		enum { _hx_ClassId = 0x7fae38d3 };

		void __construct( ::Dynamic inType);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.svg.Grad")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.svg.Grad"); }
		static ::hx::ObjectPtr< Grad_obj > __new( ::Dynamic inType);
		static ::hx::ObjectPtr< Grad_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inType);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Grad_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Grad",ee,fb,44,2f); }

		 ::openfl::geom::Matrix gradMatrix;
		Float radius;
		Float x1;
		Float y1;
		Float x2;
		Float y2;
		void updateMatrix( ::openfl::geom::Matrix inMatrix);
		::Dynamic updateMatrix_dyn();

};

} // end namespace format
} // end namespace svg

#endif /* INCLUDED_format_svg_Grad */ 
