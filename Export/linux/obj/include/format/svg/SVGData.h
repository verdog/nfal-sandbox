// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_svg_SVGData
#define INCLUDED_format_svg_SVGData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_format_svg_Group
#include <format/svg/Group.h>
#endif
HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS2(format,svg,FillType)
HX_DECLARE_CLASS2(format,svg,Group)
HX_DECLARE_CLASS2(format,svg,Path)
HX_DECLARE_CLASS2(format,svg,PathParser)
HX_DECLARE_CLASS2(format,svg,SVGData)
HX_DECLARE_CLASS2(format,svg,Text)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace format{
namespace svg{


class HXCPP_CLASS_ATTRIBUTES SVGData_obj : public  ::format::svg::Group_obj
{
	public:
		typedef  ::format::svg::Group_obj super;
		typedef SVGData_obj OBJ_;
		SVGData_obj();

	public:
		enum { _hx_ClassId = 0x131a3f9d };

		void __construct( ::Xml inXML,::hx::Null< bool >  __o_inConvertCubics);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.svg.SVGData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.svg.SVGData"); }
		static ::hx::ObjectPtr< SVGData_obj > __new( ::Xml inXML,::hx::Null< bool >  __o_inConvertCubics);
		static ::hx::ObjectPtr< SVGData_obj > __alloc(::hx::Ctx *_hx_ctx, ::Xml inXML,::hx::Null< bool >  __o_inConvertCubics);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SVGData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SVGData",8e,3a,d6,ec); }

		static void __boot();
		static Float SIN45;
		static Float TAN22;
		static  ::EReg mStyleSplit;
		static  ::EReg mStyleValue;
		static  ::EReg mTranslateMatch;
		static  ::EReg mScaleMatch;
		static  ::EReg mMatrixMatch;
		static  ::EReg mRotationMatch;
		static  ::EReg mURLMatch;
		static  ::EReg mRGBMatch;
		static  ::format::svg::FillType defaultFill;
		static int parseHex(::String hex);
		static ::Dynamic parseHex_dyn();

		static int parseRGBMatch( ::EReg rgbMatch);
		static ::Dynamic parseRGBMatch_dyn();

		Float height;
		Float width;
		bool mConvertCubics;
		 ::haxe::ds::StringMap mGrads;
		 ::format::svg::PathParser mPathParser;
		Float trimToFloat(::String value);
		::Dynamic trimToFloat_dyn();

		Float applyTransform( ::openfl::geom::Matrix ioMatrix,::String inTrans);
		::Dynamic applyTransform_dyn();

		void dumpGroup( ::format::svg::Group g,::String indent);
		::Dynamic dumpGroup_dyn();

		int getColorStyle(::String inKey, ::Xml inNode, ::haxe::ds::StringMap inStyles,int inDefault);
		::Dynamic getColorStyle_dyn();

		 ::format::svg::FillType getFillStyle(::String inKey, ::Xml inNode, ::haxe::ds::StringMap inStyles);
		::Dynamic getFillStyle_dyn();

		Float getFloat( ::Xml inXML,::String inName,::hx::Null< Float >  inDef);
		::Dynamic getFloat_dyn();

		Float getFloatStyle(::String inKey, ::Xml inNode, ::haxe::ds::StringMap inStyles,Float inDefault);
		::Dynamic getFloatStyle_dyn();

		 ::Dynamic getStyleAndConvert(::String inKey, ::Xml inNode, ::haxe::ds::StringMap inStyles, ::Dynamic inDefault, ::haxe::ds::StringMap inConvert);
		::Dynamic getStyleAndConvert_dyn();

		 ::Dynamic getStrokeStyle(::String inKey, ::Xml inNode, ::haxe::ds::StringMap inStyles, ::Dynamic inDefault);
		::Dynamic getStrokeStyle_dyn();

		::String getStyle(::String inKey, ::Xml inNode, ::haxe::ds::StringMap inStyles,::String inDefault);
		::Dynamic getStyle_dyn();

		 ::haxe::ds::StringMap getStyles( ::Xml inNode, ::haxe::ds::StringMap inPrevStyles);
		::Dynamic getStyles_dyn();

		void loadDefs( ::Xml inXML);
		::Dynamic loadDefs_dyn();

		void loadGradient( ::Xml inGrad, ::Dynamic inType,bool inCrossLink);
		::Dynamic loadGradient_dyn();

		 ::format::svg::Group loadGroup( ::format::svg::Group g, ::Xml inG, ::openfl::geom::Matrix matrix, ::haxe::ds::StringMap inStyles);
		::Dynamic loadGroup_dyn();

		 ::format::svg::Path loadPath( ::Xml inPath, ::openfl::geom::Matrix matrix, ::haxe::ds::StringMap inStyles,bool inIsRect,bool inIsEllipse,::hx::Null< bool >  inIsCircle);
		::Dynamic loadPath_dyn();

		 ::format::svg::Text loadText( ::Xml inText, ::openfl::geom::Matrix matrix, ::haxe::ds::StringMap inStyles);
		::Dynamic loadText_dyn();

};

} // end namespace format
} // end namespace svg

#endif /* INCLUDED_format_svg_SVGData */ 
