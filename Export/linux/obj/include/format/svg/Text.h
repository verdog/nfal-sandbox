// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_svg_Text
#define INCLUDED_format_svg_Text

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_ac4be4d6f9a94e94_8_new)
HX_DECLARE_CLASS2(format,svg,FillType)
HX_DECLARE_CLASS2(format,svg,Text)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace format{
namespace svg{


class HXCPP_CLASS_ATTRIBUTES Text_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Text_obj OBJ_;
		Text_obj();

	public:
		enum { _hx_ClassId = 0x7fffdf02 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.svg.Text")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.svg.Text"); }

		inline static ::hx::ObjectPtr< Text_obj > __new() {
			::hx::ObjectPtr< Text_obj > __this = new Text_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Text_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Text_obj *__this = (Text_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Text_obj), true, "format.svg.Text"));
			*(void **)__this = Text_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_ac4be4d6f9a94e94_8_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Text_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Text",cd,f8,d2,37); }

		::String name;
		Float x;
		Float y;
		 ::openfl::geom::Matrix matrix;
		::String text;
		 ::format::svg::FillType fill;
		Float fill_alpha;
		Float stroke_alpha;
		 ::Dynamic stroke_colour;
		Float stroke_width;
		::String font_family;
		Float font_size;
		Float kerning;
		Float letter_spacing;
		::String text_align;
};

} // end namespace format
} // end namespace svg

#endif /* INCLUDED_format_svg_Text */ 
