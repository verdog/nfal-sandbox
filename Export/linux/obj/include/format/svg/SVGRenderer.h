// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_svg_SVGRenderer
#define INCLUDED_format_svg_SVGRenderer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS2(format,gfx,Gfx)
HX_DECLARE_CLASS2(format,gfx,GfxBytes)
HX_DECLARE_CLASS2(format,svg,Group)
HX_DECLARE_CLASS2(format,svg,Path)
HX_DECLARE_CLASS2(format,svg,SVGData)
HX_DECLARE_CLASS2(format,svg,SVGRenderer)
HX_DECLARE_CLASS2(format,svg,Text)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shape)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace format{
namespace svg{


class HXCPP_CLASS_ATTRIBUTES SVGRenderer_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SVGRenderer_obj OBJ_;
		SVGRenderer_obj();

	public:
		enum { _hx_ClassId = 0x7dfa667a };

		void __construct( ::format::svg::SVGData inSvg,::String inLayer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.svg.SVGRenderer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.svg.SVGRenderer"); }
		static ::hx::ObjectPtr< SVGRenderer_obj > __new( ::format::svg::SVGData inSvg,::String inLayer);
		static ::hx::ObjectPtr< SVGRenderer_obj > __alloc(::hx::Ctx *_hx_ctx, ::format::svg::SVGData inSvg,::String inLayer);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SVGRenderer_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SVGRenderer",a7,ab,a2,6e); }

		static void __boot();
		static Float SQRT2;
		static ::Array< ::String > toHaxe( ::Xml inXML, ::Dynamic inFilter);
		static ::Dynamic toHaxe_dyn();

		static  ::format::gfx::GfxBytes toBytes( ::Xml inXML, ::Dynamic inFilter);
		static ::Dynamic toBytes_dyn();

		Float width;
		Float height;
		 ::format::svg::SVGData mSvg;
		 ::format::svg::Group mRoot;
		 ::format::gfx::Gfx mGfx;
		 ::openfl::geom::Matrix mMatrix;
		 ::openfl::geom::Rectangle mScaleRect;
		 ::Dynamic mScaleW;
		 ::Dynamic mScaleH;
		 ::Dynamic mFilter;
		Dynamic mFilter_dyn() { return mFilter;}
		::Array< ::String > mGroupPath;
		 ::Dynamic iterate( ::Dynamic inGfx, ::Dynamic inFilter);
		::Dynamic iterate_dyn();

		bool hasGroup(::String inName);
		::Dynamic hasGroup_dyn();

		void iterateText( ::format::svg::Text inText);
		::Dynamic iterateText_dyn();

		void iteratePath( ::format::svg::Path inPath);
		::Dynamic iteratePath_dyn();

		void iterateGroup( ::format::svg::Group inGroup,bool inIgnoreDot);
		::Dynamic iterateGroup_dyn();

		void render( ::openfl::display::Graphics inGfx, ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::openfl::geom::Rectangle inScaleRect, ::Dynamic inScaleW, ::Dynamic inScaleH);
		::Dynamic render_dyn();

		void renderRect( ::openfl::display::Graphics inGfx, ::Dynamic inFilter, ::openfl::geom::Rectangle scaleRect, ::openfl::geom::Rectangle inBounds, ::openfl::geom::Rectangle inRect);
		::Dynamic renderRect_dyn();

		void renderRect0( ::openfl::display::Graphics inGfx, ::Dynamic inFilter, ::openfl::geom::Rectangle scaleRect, ::openfl::geom::Rectangle inBounds, ::openfl::geom::Rectangle inRect);
		::Dynamic renderRect0_dyn();

		 ::openfl::geom::Rectangle getExtent( ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::Dynamic inIgnoreDot);
		::Dynamic getExtent_dyn();

		 ::format::svg::Text findText( ::Dynamic inFilter);
		::Dynamic findText_dyn();

		 ::openfl::geom::Rectangle getMatchingRect( ::EReg inMatch);
		::Dynamic getMatchingRect_dyn();

		void renderObject( ::openfl::display::DisplayObject inObj, ::openfl::display::Graphics inGfx, ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::openfl::geom::Rectangle inScale9);
		::Dynamic renderObject_dyn();

		void renderSprite( ::openfl::display::Sprite inObj, ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::openfl::geom::Rectangle inScale9);
		::Dynamic renderSprite_dyn();

		 ::openfl::display::Shape createShape( ::openfl::geom::Matrix inMatrix, ::Dynamic inFilter, ::openfl::geom::Rectangle inScale9);
		::Dynamic createShape_dyn();

		 ::openfl::display::Shape namedShape(::String inName);
		::Dynamic namedShape_dyn();

		 ::openfl::display::BitmapData renderBitmap( ::openfl::geom::Rectangle inRect,::hx::Null< Float >  inScale);
		::Dynamic renderBitmap_dyn();

};

} // end namespace format
} // end namespace svg

#endif /* INCLUDED_format_svg_SVGRenderer */ 
