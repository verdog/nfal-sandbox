// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_svg_Group
#define INCLUDED_format_svg_Group

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(format,svg,DisplayElement)
HX_DECLARE_CLASS2(format,svg,Group)

namespace format{
namespace svg{


class HXCPP_CLASS_ATTRIBUTES Group_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Group_obj OBJ_;
		Group_obj();

	public:
		enum { _hx_ClassId = 0x76432db2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.svg.Group")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.svg.Group"); }
		static ::hx::ObjectPtr< Group_obj > __new();
		static ::hx::ObjectPtr< Group_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Group_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Group",1f,23,22,2d); }

		bool hasGroup(::String inName);
		::Dynamic hasGroup_dyn();

		 ::format::svg::Group findGroup(::String inName);
		::Dynamic findGroup_dyn();

		::String name;
		::Array< ::Dynamic> children;
};

} // end namespace format
} // end namespace svg

#endif /* INCLUDED_format_svg_Group */ 
