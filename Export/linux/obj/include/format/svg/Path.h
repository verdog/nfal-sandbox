// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_svg_Path
#define INCLUDED_format_svg_Path

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_92a4da35fc358e4d_15_new)
HX_DECLARE_CLASS2(format,svg,FillType)
HX_DECLARE_CLASS2(format,svg,Path)
HX_DECLARE_CLASS2(format,svg,PathSegment)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace format{
namespace svg{


class HXCPP_CLASS_ATTRIBUTES Path_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Path_obj OBJ_;
		Path_obj();

	public:
		enum { _hx_ClassId = 0x7f670da6 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.svg.Path")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.svg.Path"); }

		inline static ::hx::ObjectPtr< Path_obj > __new() {
			::hx::ObjectPtr< Path_obj > __this = new Path_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Path_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Path_obj *__this = (Path_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Path_obj), true, "format.svg.Path"));
			*(void **)__this = Path_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_92a4da35fc358e4d_15_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Path_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Path",c5,11,2b,35); }

		 ::openfl::geom::Matrix matrix;
		::String name;
		Float font_size;
		 ::format::svg::FillType fill;
		Float alpha;
		Float fill_alpha;
		Float stroke_alpha;
		 ::Dynamic stroke_colour;
		Float stroke_width;
		 ::Dynamic stroke_caps;
		 ::Dynamic joint_style;
		Float miter_limit;
		::Array< ::Dynamic> segments;
};

} // end namespace format
} // end namespace svg

#endif /* INCLUDED_format_svg_Path */ 
