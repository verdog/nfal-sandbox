// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_svg_PathParser
#define INCLUDED_format_svg_PathParser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(format,svg,PathParser)
HX_DECLARE_CLASS2(format,svg,PathSegment)

namespace format{
namespace svg{


class HXCPP_CLASS_ATTRIBUTES PathParser_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PathParser_obj OBJ_;
		PathParser_obj();

	public:
		enum { _hx_ClassId = 0x4dc00511 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.svg.PathParser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.svg.PathParser"); }
		static ::hx::ObjectPtr< PathParser_obj > __new();
		static ::hx::ObjectPtr< PathParser_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PathParser_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PathParser",84,44,6f,f6); }

		static void __boot();
		static ::Array< int > sCommandArgs;
		static int MOVE;
		static int MOVER;
		static int LINE;
		static int LINER;
		static int HLINE;
		static int HLINER;
		static int VLINE;
		static int VLINER;
		static int CUBIC;
		static int CUBICR;
		static int SCUBIC;
		static int SCUBICR;
		static int QUAD;
		static int QUADR;
		static int SQUAD;
		static int SQUADR;
		static int ARC;
		static int ARCR;
		static int CLOSE;
		static int CLOSER;
		static int UNKNOWN;
		static int SEPARATOR;
		static int FLOAT;
		static int FLOAT_SIGN;
		static int FLOAT_DOT;
		static int FLOAT_EXP;
		Float lastMoveX;
		Float lastMoveY;
		 ::format::svg::PathSegment prev;
		::Array< ::Dynamic> parse(::String pathToParse,bool inConvertCubics);
		::Dynamic parse_dyn();

		int commandArgs(int inCode);
		::Dynamic commandArgs_dyn();

		Float prevX();
		::Dynamic prevX_dyn();

		Float prevY();
		::Dynamic prevY_dyn();

		Float prevCX();
		::Dynamic prevCX_dyn();

		Float prevCY();
		::Dynamic prevCY_dyn();

		 ::format::svg::PathSegment createCommand(int code,::Array< Float > a);
		::Dynamic createCommand_dyn();

};

} // end namespace format
} // end namespace svg

#endif /* INCLUDED_format_svg_PathParser */ 
