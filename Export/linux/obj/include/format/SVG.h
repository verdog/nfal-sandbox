// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_SVG
#define INCLUDED_format_SVG

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(format,SVG)
HX_DECLARE_CLASS2(format,svg,Group)
HX_DECLARE_CLASS2(format,svg,SVGData)
HX_DECLARE_CLASS2(openfl,display,Graphics)

namespace format{


class HXCPP_CLASS_ATTRIBUTES SVG_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SVG_obj OBJ_;
		SVG_obj();

	public:
		enum { _hx_ClassId = 0x64ba7a2d };

		void __construct(::String content);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.SVG")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.SVG"); }
		static ::hx::ObjectPtr< SVG_obj > __new(::String content);
		static ::hx::ObjectPtr< SVG_obj > __alloc(::hx::Ctx *_hx_ctx,::String content);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SVG_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SVG",44,46,3f,00); }

		 ::format::svg::SVGData data;
		void render( ::openfl::display::Graphics graphics,::hx::Null< Float >  x,::hx::Null< Float >  y,::hx::Null< int >  width,::hx::Null< int >  height,::String inLayer);
		::Dynamic render_dyn();

};

} // end namespace format

#endif /* INCLUDED_format_SVG */ 
