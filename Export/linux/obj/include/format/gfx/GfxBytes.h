// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_gfx_GfxBytes
#define INCLUDED_format_gfx_GfxBytes

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_format_gfx_Gfx
#include <format/gfx/Gfx.h>
#endif
HX_DECLARE_CLASS2(format,gfx,Gfx)
HX_DECLARE_CLASS2(format,gfx,GfxBytes)
HX_DECLARE_CLASS2(format,gfx,Gradient)
HX_DECLARE_CLASS2(format,gfx,LineStyle)
HX_DECLARE_CLASS2(haxe,crypto,BaseCode)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(openfl,utils,ByteArrayData)
HX_DECLARE_CLASS2(openfl,utils,IDataInput)
HX_DECLARE_CLASS2(openfl,utils,IDataOutput)

namespace format{
namespace gfx{


class HXCPP_CLASS_ATTRIBUTES GfxBytes_obj : public  ::format::gfx::Gfx_obj
{
	public:
		typedef  ::format::gfx::Gfx_obj super;
		typedef GfxBytes_obj OBJ_;
		GfxBytes_obj();

	public:
		enum { _hx_ClassId = 0x46b7b2f4 };

		void __construct( ::openfl::utils::ByteArrayData inBuffer,::hx::Null< int >  __o_inFlags);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.gfx.GfxBytes")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.gfx.GfxBytes"); }
		static ::hx::ObjectPtr< GfxBytes_obj > __new( ::openfl::utils::ByteArrayData inBuffer,::hx::Null< int >  __o_inFlags);
		static ::hx::ObjectPtr< GfxBytes_obj > __alloc(::hx::Ctx *_hx_ctx, ::openfl::utils::ByteArrayData inBuffer,::hx::Null< int >  __o_inFlags);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GfxBytes_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GfxBytes",52,bc,23,ba); }

		static void __boot();
		static int _hx_EOF;
		static int SIZE;
		static int BEGIN_FILL;
		static int GRADIENT_FILL;
		static int END_FILL;
		static int LINE_STYLE;
		static int END_LINE_STYLE;
		static int MOVE;
		static int LINE;
		static int CURVE;
		static ::String base64;
		static  ::haxe::crypto::BaseCode baseCoder;
		static  ::format::gfx::GfxBytes fromString(::String inString);
		static ::Dynamic fromString_dyn();

		static ::Array< ::Dynamic> scaleModes;
		static ::Array< ::Dynamic> capsStyles;
		static ::Array< ::Dynamic> jointStyles;
		static ::Array< ::Dynamic> spreadMethods;
		static ::Array< ::Dynamic> interpolationMethods;
		 ::openfl::utils::ByteArrayData buffer;
		virtual ::String toString();
		::Dynamic toString_dyn();

		void eof();

		void iterate( ::format::gfx::Gfx inGfx);
		::Dynamic iterate_dyn();

		void size(Float inWidth,Float inHeight);

		void pushClipped(Float inVal);
		::Dynamic pushClipped_dyn();

		void writeRGB(int inVal);
		::Dynamic writeRGB_dyn();

		int readRGB();
		::Dynamic readRGB_dyn();

		void beginGradientFill( ::format::gfx::Gradient grad);

		void beginFill(int color,Float alpha);

		void endFill();

		void lineStyle( ::format::gfx::LineStyle style);

		void endLineStyle();

		void moveTo(Float inX,Float inY);

		void lineTo(Float inX,Float inY);

		void curveTo(Float inCX,Float inCY,Float inX,Float inY);

};

} // end namespace format
} // end namespace gfx

#endif /* INCLUDED_format_gfx_GfxBytes */ 
