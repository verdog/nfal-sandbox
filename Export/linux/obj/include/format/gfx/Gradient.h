// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_gfx_Gradient
#define INCLUDED_format_gfx_Gradient

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(format,gfx,Gradient)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace format{
namespace gfx{


class HXCPP_CLASS_ATTRIBUTES Gradient_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Gradient_obj OBJ_;
		Gradient_obj();

	public:
		enum { _hx_ClassId = 0x201404ea };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.gfx.Gradient")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.gfx.Gradient"); }
		static ::hx::ObjectPtr< Gradient_obj > __new();
		static ::hx::ObjectPtr< Gradient_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Gradient_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Gradient",10,f6,f0,03); }

		 ::Dynamic type;
		::Array< int > colors;
		::Array< Float > alphas;
		::Array< int > ratios;
		 ::openfl::geom::Matrix matrix;
		 ::Dynamic spread;
		 ::Dynamic interp;
		Float focus;
};

} // end namespace format
} // end namespace gfx

#endif /* INCLUDED_format_gfx_Gradient */ 
