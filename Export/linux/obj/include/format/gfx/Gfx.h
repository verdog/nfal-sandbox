// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_gfx_Gfx
#define INCLUDED_format_gfx_Gfx

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(format,gfx,Gfx)
HX_DECLARE_CLASS2(format,gfx,Gradient)
HX_DECLARE_CLASS2(format,gfx,LineStyle)
HX_DECLARE_CLASS2(format,svg,Text)

namespace format{
namespace gfx{


class HXCPP_CLASS_ATTRIBUTES Gfx_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Gfx_obj OBJ_;
		Gfx_obj();

	public:
		enum { _hx_ClassId = 0x79a02eff };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="format.gfx.Gfx")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"format.gfx.Gfx"); }
		static ::hx::ObjectPtr< Gfx_obj > __new();
		static ::hx::ObjectPtr< Gfx_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Gfx_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Gfx",59,39,36,00); }

		virtual bool geometryOnly();
		::Dynamic geometryOnly_dyn();

		virtual void size(Float inWidth,Float inHeight);
		::Dynamic size_dyn();

		virtual void beginGradientFill( ::format::gfx::Gradient grad);
		::Dynamic beginGradientFill_dyn();

		virtual void beginFill(int color,Float alpha);
		::Dynamic beginFill_dyn();

		virtual void endFill();
		::Dynamic endFill_dyn();

		virtual void lineStyle( ::format::gfx::LineStyle style);
		::Dynamic lineStyle_dyn();

		virtual void endLineStyle();
		::Dynamic endLineStyle_dyn();

		virtual void moveTo(Float inX,Float inY);
		::Dynamic moveTo_dyn();

		virtual void lineTo(Float inX,Float inY);
		::Dynamic lineTo_dyn();

		virtual void curveTo(Float inCX,Float inCY,Float inX,Float inY);
		::Dynamic curveTo_dyn();

		virtual void renderText( ::format::svg::Text text);
		::Dynamic renderText_dyn();

		virtual void eof();
		::Dynamic eof_dyn();

};

} // end namespace format
} // end namespace gfx

#endif /* INCLUDED_format_gfx_Gfx */ 
