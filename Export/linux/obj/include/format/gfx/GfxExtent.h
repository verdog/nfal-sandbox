// Generated by Haxe 4.1.5
#ifndef INCLUDED_format_gfx_GfxExtent
#define INCLUDED_format_gfx_GfxExtent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_format_gfx_Gfx
#include <format/gfx/Gfx.h>
#endif
HX_DECLARE_CLASS2(format,gfx,Gfx)
HX_DECLARE_CLASS2(format,gfx,GfxExtent)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace format{
namespace gfx{


class HXCPP_CLASS_ATTRIBUTES GfxExtent_obj : public  ::format::gfx::Gfx_obj
{
	public:
		typedef  ::format::gfx::Gfx_obj super;
		typedef GfxExtent_obj OBJ_;
		GfxExtent_obj();

	public:
		enum { _hx_ClassId = 0x39b05f41 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="format.gfx.GfxExtent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"format.gfx.GfxExtent"); }
		static ::hx::ObjectPtr< GfxExtent_obj > __new();
		static ::hx::ObjectPtr< GfxExtent_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GfxExtent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GfxExtent",23,88,cc,c4); }

		 ::openfl::geom::Rectangle extent;
		void addExtent(Float inX,Float inY);
		::Dynamic addExtent_dyn();

		bool geometryOnly();

		void moveTo(Float inX,Float inY);

		void lineTo(Float inX,Float inY);

		void curveTo(Float inCX,Float inCY,Float inX,Float inY);

};

} // end namespace format
} // end namespace gfx

#endif /* INCLUDED_format_gfx_GfxExtent */ 
