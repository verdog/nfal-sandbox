// Generated by Haxe 4.1.5
#ifndef INCLUDED_GraphEdge
#define INCLUDED_GraphEdge

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(GraphEdge)
HX_DECLARE_CLASS0(GraphVertex)



class HXCPP_CLASS_ATTRIBUTES GraphEdge_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GraphEdge_obj OBJ_;
		GraphEdge_obj();

	public:
		enum { _hx_ClassId = 0x55dd17cb };

		void __construct( ::GraphVertex source, ::GraphVertex sink);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="GraphEdge")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"GraphEdge"); }
		static ::hx::ObjectPtr< GraphEdge_obj > __new( ::GraphVertex source, ::GraphVertex sink);
		static ::hx::ObjectPtr< GraphEdge_obj > __alloc(::hx::Ctx *_hx_ctx, ::GraphVertex source, ::GraphVertex sink);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GraphEdge_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GraphEdge",8b,a2,99,92); }

		 ::GraphVertex source;
		 ::GraphVertex sink;
		int nextId;
		int id;
};


#endif /* INCLUDED_GraphEdge */ 
