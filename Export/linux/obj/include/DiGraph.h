// Generated by Haxe 4.1.5
#ifndef INCLUDED_DiGraph
#define INCLUDED_DiGraph

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(DiGraph)
HX_DECLARE_CLASS0(GraphVertex)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)



class HXCPP_CLASS_ATTRIBUTES DiGraph_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DiGraph_obj OBJ_;
		DiGraph_obj();

	public:
		enum { _hx_ClassId = 0x117a65c5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="DiGraph")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"DiGraph"); }
		static ::hx::ObjectPtr< DiGraph_obj > __new();
		static ::hx::ObjectPtr< DiGraph_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DiGraph_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DiGraph",69,ed,43,34); }

		 ::haxe::ds::IntMap vertices;
		 ::haxe::ds::IntMap edges;
		void addVertex();
		::Dynamic addVertex_dyn();

		void connectVertices( ::GraphVertex source, ::GraphVertex sink);
		::Dynamic connectVertices_dyn();

};


#endif /* INCLUDED_DiGraph */ 
